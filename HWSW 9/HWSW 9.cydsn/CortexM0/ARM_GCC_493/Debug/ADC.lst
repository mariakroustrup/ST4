ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,6,4
  24              		.comm	ADC_countsPer10Volt,12,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 12
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32 0008 00040000 		.word	1024
  33              		.section	.text.ADC_Start,"ax",%progbits
  34              		.align	2
  35              		.global	ADC_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	ADC_Start, %function
  39              	ADC_Start:
  40              	.LFB1:
  41              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 2


  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 3


  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  50              		.loc 1 66 0
  51 0004 064B     		ldr	r3, .L3
  52 0006 1B78     		ldrb	r3, [r3]
  53 0008 002B     		cmp	r3, #0
  54 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  55              		.loc 1 68 0
  56 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  57              		.loc 1 69 0
  58 0010 034B     		ldr	r3, .L3
  59 0012 0122     		mov	r2, #1
  60 0014 1A70     		strb	r2, [r3]
  61              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  62              		.loc 1 71 0
  63 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  64              		.loc 1 72 0
  65 001a BD46     		mov	sp, r7
  66              		@ sp needed
  67 001c 80BD     		pop	{r7, pc}
  68              	.L4:
  69 001e C046     		.align	2
  70              	.L3:
  71 0020 00000000 		.word	ADC_initVar
  72              		.cfi_endproc
  73              	.LFE1:
  74              		.size	ADC_Start, .-ADC_Start
  75              		.section	.text.ADC_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_Init, %function
  81              	ADC_Init:
  82              	.LFB2:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 4


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 80B5     		push	{r7, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 84B0     		sub	sp, sp, #16
  90              		.cfi_def_cfa_offset 24
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC.c ****         };
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 172 0
  94 0006 1020     		mov	r0, #16
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 173 0
  98 000e 634B     		ldr	r3, .L17
  99 0010 1020     		mov	r0, #16
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC.c **** 
 176:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 177 0
 103 0018 614B     		ldr	r3, .L17+4
 104 001a 0722     		mov	r2, #7
 105 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 6


 106              		.loc 1 180 0
 107 001e 614B     		ldr	r3, .L17+8
 108 0020 1B68     		ldr	r3, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 109              		.loc 1 178 0
 110 0022 002B     		cmp	r3, #0
 111 0024 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 112              		.loc 1 178 0 is_stmt 0 discriminator 1
 113 0026 6049     		ldr	r1, .L17+12
 114 0028 00E0     		b	.L7
 115              	.L6:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 178 0 discriminator 2
 117 002a 6049     		ldr	r1, .L17+16
 118              	.L7:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 119              		.loc 1 178 0 discriminator 4
 120 002c 604B     		ldr	r3, .L17+20
 121 002e 604A     		ldr	r2, .L17+20
 122 0030 1268     		ldr	r2, [r2]
 123 0032 0A43     		orr	r2, r1
 124 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 125              		.loc 1 182 0 is_stmt 1 discriminator 4
 126 0036 5F4B     		ldr	r3, .L17+24
 127 0038 5F4A     		ldr	r2, .L17+28
 128 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 129              		.loc 1 183 0 discriminator 4
 130 003c 5F4B     		ldr	r3, .L17+32
 131 003e 604A     		ldr	r2, .L17+36
 132 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 133              		.loc 1 184 0 discriminator 4
 134 0042 604B     		ldr	r3, .L17+40
 135 0044 0022     		mov	r2, #0
 136 0046 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 137              		.loc 1 185 0 discriminator 4
 138 0048 5F4B     		ldr	r3, .L17+44
 139 004a 604A     		ldr	r2, .L17+48
 140 004c 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 141              		.loc 1 186 0 discriminator 4
 142 004e 604B     		ldr	r3, .L17+52
 143 0050 604A     		ldr	r2, .L17+56
 144 0052 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     
 188:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 145              		.loc 1 190 0 discriminator 4
 146 0054 604B     		ldr	r3, .L17+60
 147 0056 604A     		ldr	r2, .L17+60
 148 0058 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 7


 149 005a 8021     		mov	r1, #128
 150 005c 4902     		lsl	r1, r1, #9
 151 005e 0A43     		orr	r2, r1
 152 0060 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 153              		.loc 1 193 0 discriminator 4
 154 0062 5E4B     		ldr	r3, .L17+64
 155 0064 5D4A     		ldr	r2, .L17+64
 156 0066 1268     		ldr	r2, [r2]
 157 0068 8021     		mov	r1, #128
 158 006a 4902     		lsl	r1, r1, #9
 159 006c 0A43     		orr	r2, r1
 160 006e 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 161              		.loc 1 197 0 discriminator 4
 162 0070 5B4B     		ldr	r3, .L17+68
 163 0072 0022     		mov	r2, #0
 164 0074 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 165              		.loc 1 198 0 discriminator 4
 166 0076 5B4B     		ldr	r3, .L17+72
 167 0078 0022     		mov	r2, #0
 168 007a 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 169              		.loc 1 199 0 discriminator 4
 170 007c 5A4B     		ldr	r3, .L17+76
 171 007e 0122     		mov	r2, #1
 172 0080 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c **** 
 201:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC.c **** 
 205:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 173              		.loc 1 206 0 discriminator 4
 174 0082 5A4B     		ldr	r3, .L17+80
 175 0084 1B68     		ldr	r3, [r3]
 176 0086 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 177              		.loc 1 207 0 discriminator 4
 178 0088 7B68     		ldr	r3, [r7, #4]
 179 008a 594A     		ldr	r2, .L17+84
 180 008c 1340     		and	r3, r2
 181 008e 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     
 209:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 8


 215:.\Generated_Source\PSoC4/ADC.c ****     #else
 216:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC.c ****         #else
 220:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 182              		.loc 1 220 0 discriminator 4
 183 0090 7B68     		ldr	r3, [r7, #4]
 184 0092 8022     		mov	r2, #128
 185 0094 9205     		lsl	r2, r2, #22
 186 0096 1343     		orr	r3, r2
 187 0098 7B60     		str	r3, [r7, #4]
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 188              		.loc 1 221 0 discriminator 4
 189 009a 7B68     		ldr	r3, [r7, #4]
 190 009c 0122     		mov	r2, #1
 191 009e 9343     		bic	r3, r2
 192 00a0 7B60     		str	r3, [r7, #4]
 222:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC.c ****     
 226:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 193              		.loc 1 226 0 discriminator 4
 194 00a2 524B     		ldr	r3, .L17+80
 195 00a4 7A68     		ldr	r2, [r7, #4]
 196 00a6 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC.c **** 
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 197              		.loc 1 232 0 discriminator 4
 198 00a8 0023     		mov	r3, #0
 199 00aa FB60     		str	r3, [r7, #12]
 200 00ac 70E0     		b	.L8
 201              	.L16:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 234:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 202              		.loc 1 234 0
 203 00ae 514B     		ldr	r3, .L17+88
 204 00b0 FA68     		ldr	r2, [r7, #12]
 205 00b2 9200     		lsl	r2, r2, #2
 206 00b4 D258     		ldr	r2, [r2, r3]
 207 00b6 DC23     		mov	r3, #220
 208 00b8 9B01     		lsl	r3, r3, #6
 209 00ba 1340     		and	r3, r2
 210 00bc 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 211              		.loc 1 236 0
 212 00be 4E4A     		ldr	r2, .L17+92
 213 00c0 FB68     		ldr	r3, [r7, #12]
 214 00c2 D318     		add	r3, r2, r3
 215 00c4 1B78     		ldrb	r3, [r3]
 216 00c6 1A1C     		mov	r2, r3
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 9


 217 00c8 7B68     		ldr	r3, [r7, #4]
 218 00ca 1343     		orr	r3, r2
 219 00cc 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC.c ****         
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC.c ****         */
 244:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC.c **** 
 249:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 220              		.loc 1 253 0
 221 00ce FB68     		ldr	r3, [r7, #12]
 222 00d0 9B00     		lsl	r3, r3, #2
 223 00d2 4A4A     		ldr	r2, .L17+96
 224 00d4 9446     		mov	ip, r2
 225 00d6 6344     		add	r3, r3, ip
 226 00d8 7A68     		ldr	r2, [r7, #4]
 227 00da 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC.c **** 
 255:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 228              		.loc 1 255 0
 229 00dc 454B     		ldr	r3, .L17+88
 230 00de FA68     		ldr	r2, [r7, #12]
 231 00e0 9200     		lsl	r2, r2, #2
 232 00e2 D358     		ldr	r3, [r2, r3]
 233 00e4 0122     		mov	r2, #1
 234 00e6 1340     		and	r3, r2
 235 00e8 09D0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC.c ****             {
 257:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 236              		.loc 1 257 0
 237 00ea 3D4B     		ldr	r3, .L17+68
 238 00ec 3C4A     		ldr	r2, .L17+68
 239 00ee 1268     		ldr	r2, [r2]
 240 00f0 F968     		ldr	r1, [r7, #12]
 241 00f2 0120     		mov	r0, #1
 242 00f4 8840     		lsl	r0, r0, r1
 243 00f6 011C     		mov	r1, r0
 244 00f8 89B2     		uxth	r1, r1
 245 00fa 0A43     		orr	r2, r1
 246 00fc 1A60     		str	r2, [r3]
 247              	.L9:
 258:.\Generated_Source\PSoC4/ADC.c ****             }
 259:.\Generated_Source\PSoC4/ADC.c **** 
 260:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 248              		.loc 1 260 0
 249 00fe 3D4B     		ldr	r3, .L17+88
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 10


 250 0100 FA68     		ldr	r2, [r7, #12]
 251 0102 9200     		lsl	r2, r2, #2
 252 0104 D358     		ldr	r3, [r2, r3]
 253 0106 0222     		mov	r2, #2
 254 0108 1340     		and	r3, r2
 255 010a 09D0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC.c ****             {
 262:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 256              		.loc 1 262 0
 257 010c 354B     		ldr	r3, .L17+72
 258 010e 354A     		ldr	r2, .L17+72
 259 0110 1268     		ldr	r2, [r2]
 260 0112 F968     		ldr	r1, [r7, #12]
 261 0114 0120     		mov	r0, #1
 262 0116 8840     		lsl	r0, r0, r1
 263 0118 011C     		mov	r1, r0
 264 011a 89B2     		uxth	r1, r1
 265 011c 0A43     		orr	r2, r1
 266 011e 1A60     		str	r2, [r3]
 267              	.L10:
 263:.\Generated_Source\PSoC4/ADC.c ****             }
 264:.\Generated_Source\PSoC4/ADC.c ****         }
 265:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC.c ****             else
 267:.\Generated_Source\PSoC4/ADC.c ****             {
 268:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:.\Generated_Source\PSoC4/ADC.c **** 
 270:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC.c ****                 {
 272:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC.c ****                 }
 274:.\Generated_Source\PSoC4/ADC.c **** 
 275:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:.\Generated_Source\PSoC4/ADC.c ****                 {
 277:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC.c ****                 }
 279:.\Generated_Source\PSoC4/ADC.c ****             }
 280:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC.c **** 
 282:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 268              		.loc 1 282 0
 269 0120 344B     		ldr	r3, .L17+88
 270 0122 FA68     		ldr	r2, [r7, #12]
 271 0124 9200     		lsl	r2, r2, #2
 272 0126 D258     		ldr	r2, [r2, r3]
 273 0128 8023     		mov	r3, #128
 274 012a 9B00     		lsl	r3, r3, #2
 275 012c 1340     		and	r3, r2
 276 012e 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC.c ****         {
 284:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 277              		.loc 1 284 0
 278 0130 8023     		mov	r3, #128
 279 0132 5B00     		lsl	r3, r3, #1
 280 0134 BB60     		str	r3, [r7, #8]
 281 0136 02E0     		b	.L12
 282              	.L11:
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 11


 285:.\Generated_Source\PSoC4/ADC.c ****         }
 286:.\Generated_Source\PSoC4/ADC.c ****         else
 287:.\Generated_Source\PSoC4/ADC.c ****         {
 288:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 283              		.loc 1 288 0
 284 0138 8023     		mov	r3, #128
 285 013a 5B01     		lsl	r3, r3, #5
 286 013c BB60     		str	r3, [r7, #8]
 287              	.L12:
 289:.\Generated_Source\PSoC4/ADC.c ****         }
 290:.\Generated_Source\PSoC4/ADC.c **** 
 291:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 288              		.loc 1 291 0
 289 013e 2D4B     		ldr	r3, .L17+88
 290 0140 FA68     		ldr	r2, [r7, #12]
 291 0142 9200     		lsl	r2, r2, #2
 292 0144 D258     		ldr	r2, [r2, r3]
 293 0146 8023     		mov	r3, #128
 294 0148 5B00     		lsl	r3, r3, #1
 295 014a 1340     		and	r3, r2
 296 014c 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC.c ****         {
 293:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC.c ****             #else
 298:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 297              		.loc 1 298 0
 298 014e 2C4B     		ldr	r3, .L17+100
 299 0150 FA68     		ldr	r2, [r7, #12]
 300 0152 5200     		lsl	r2, r2, #1
 301 0154 0021     		mov	r1, #0
 302 0156 D152     		strh	r1, [r2, r3]
 303 0158 04E0     		b	.L14
 304              	.L13:
 299:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC.c ****         }
 301:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC.c ****         {
 303:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC.c ****             #else
 307:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 305              		.loc 1 307 0
 306 015a 294B     		ldr	r3, .L17+100
 307 015c FA68     		ldr	r2, [r7, #12]
 308 015e 5200     		lsl	r2, r2, #1
 309 0160 0021     		mov	r1, #0
 310 0162 D152     		strh	r1, [r2, r3]
 311              	.L14:
 308:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC.c ****         }
 310:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 312              		.loc 1 311 0 discriminator 2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 12


 313 0164 BB68     		ldr	r3, [r7, #8]
 314 0166 274A     		ldr	r2, .L17+104
 315 0168 5343     		mul	r3, r2
 316 016a 8022     		mov	r2, #128
 317 016c D200     		lsl	r2, r2, #3
 318 016e 9446     		mov	ip, r2
 319 0170 6344     		add	r3, r3, ip
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 320              		.loc 1 312 0 discriminator 2
 321 0172 002B     		cmp	r3, #0
 322 0174 02DA     		bge	.L15
 323 0176 244A     		ldr	r2, .L17+108
 324 0178 9446     		mov	ip, r2
 325 017a 6344     		add	r3, r3, ip
 326              	.L15:
 327 017c DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 328              		.loc 1 311 0 discriminator 2
 329 017e 9BB2     		uxth	r3, r3
 330 0180 19B2     		sxth	r1, r3
 331 0182 224B     		ldr	r3, .L17+112
 332 0184 FA68     		ldr	r2, [r7, #12]
 333 0186 9200     		lsl	r2, r2, #2
 334 0188 D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 335              		.loc 1 232 0 discriminator 2
 336 018a FB68     		ldr	r3, [r7, #12]
 337 018c 0133     		add	r3, r3, #1
 338 018e FB60     		str	r3, [r7, #12]
 339              	.L8:
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 340              		.loc 1 232 0 is_stmt 0 discriminator 1
 341 0190 FB68     		ldr	r3, [r7, #12]
 342 0192 022B     		cmp	r3, #2
 343 0194 8BD9     		bls	.L16
 313:.\Generated_Source\PSoC4/ADC.c ****     }
 314:.\Generated_Source\PSoC4/ADC.c **** }
 344              		.loc 1 314 0 is_stmt 1
 345 0196 BD46     		mov	sp, r7
 346 0198 04B0     		add	sp, sp, #16
 347              		@ sp needed
 348 019a 80BD     		pop	{r7, pc}
 349              	.L18:
 350              		.align	2
 351              	.L17:
 352 019c 00000000 		.word	ADC_ISR
 353 01a0 20003A40 		.word	1077542944
 354 01a4 80033A40 		.word	1077543808
 355 01a8 50201013 		.word	319823952
 356 01ac 50200013 		.word	318775376
 357 01b0 00003A40 		.word	1077542912
 358 01b4 04003A40 		.word	1077542916
 359 01b8 CC000080 		.word	-2147483444
 360 01bc 18003A40 		.word	1077542936
 361 01c0 0000FF07 		.word	134152192
 362 01c4 1C003A40 		.word	1077542940
 363 01c8 10003A40 		.word	1077542928
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 13


 364 01cc 98000400 		.word	262296
 365 01d0 14003A40 		.word	1077542932
 366 01d4 04000400 		.word	262148
 367 01d8 00033A40 		.word	1077543680
 368 01dc 40033A40 		.word	1077543744
 369 01e0 28023A40 		.word	1077543464
 370 01e4 38023A40 		.word	1077543480
 371 01e8 18023A40 		.word	1077543448
 372 01ec 30003A40 		.word	1077542960
 373 01f0 FFFFFFDF 		.word	-536870913
 374 01f4 00000000 		.word	ADC_channelsConfig
 375 01f8 0C000000 		.word	ADC_InputsPlacement.4772
 376 01fc 80003A40 		.word	1077543040
 377 0200 00000000 		.word	ADC_offset
 378 0204 10270000 		.word	10000
 379 0208 FF070000 		.word	2047
 380 020c 00000000 		.word	ADC_countsPer10Volt
 381              		.cfi_endproc
 382              	.LFE2:
 383              		.size	ADC_Init, .-ADC_Init
 384              		.section	.text.ADC_Enable,"ax",%progbits
 385              		.align	2
 386              		.global	ADC_Enable
 387              		.code	16
 388              		.thumb_func
 389              		.type	ADC_Enable, %function
 390              	ADC_Enable:
 391              	.LFB3:
 315:.\Generated_Source\PSoC4/ADC.c **** 
 316:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** *
 320:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 392              		.loc 1 331 0
 393              		.cfi_startproc
 394 0000 80B5     		push	{r7, lr}
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 7, -8
 397              		.cfi_offset 14, -4
 398 0002 00AF     		add	r7, sp, #0
 399              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 400              		.loc 1 332 0
 401 0004 0A4B     		ldr	r3, .L22
 402 0006 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 14


 403 0008 002B     		cmp	r3, #0
 404 000a 0EDB     		blt	.L19
 333:.\Generated_Source\PSoC4/ADC.c ****     {
 334:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 405              		.loc 1 336 0
 406 000c C046     		mov	r8, r8
 407              	.L21:
 408              		.loc 1 336 0 is_stmt 0 discriminator 1
 409 000e 094B     		ldr	r3, .L22+4
 410 0010 1B68     		ldr	r3, [r3]
 411 0012 002B     		cmp	r3, #0
 412 0014 FBDB     		blt	.L21
 337:.\Generated_Source\PSoC4/ADC.c ****             {
 338:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC.c ****             }
 340:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC.c ****         
 342:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 413              		.loc 1 342 0 is_stmt 1
 414 0016 064B     		ldr	r3, .L22
 415 0018 054A     		ldr	r2, .L22
 416 001a 1268     		ldr	r2, [r2]
 417 001c 8021     		mov	r1, #128
 418 001e 0906     		lsl	r1, r1, #24
 419 0020 0A43     		orr	r2, r1
 420 0022 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC.c ****         
 344:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 421              		.loc 1 345 0
 422 0024 0A20     		mov	r0, #10
 423 0026 FFF7FEFF 		bl	CyDelayUs
 424              	.L19:
 346:.\Generated_Source\PSoC4/ADC.c ****     }
 347:.\Generated_Source\PSoC4/ADC.c **** }
 425              		.loc 1 347 0
 426 002a BD46     		mov	sp, r7
 427              		@ sp needed
 428 002c 80BD     		pop	{r7, pc}
 429              	.L23:
 430 002e C046     		.align	2
 431              	.L22:
 432 0030 00003A40 		.word	1077542912
 433 0034 08023A40 		.word	1077543432
 434              		.cfi_endproc
 435              	.LFE3:
 436              		.size	ADC_Enable, .-ADC_Enable
 437              		.section	.text.ADC_Stop,"ax",%progbits
 438              		.align	2
 439              		.global	ADC_Stop
 440              		.code	16
 441              		.thumb_func
 442              		.type	ADC_Stop, %function
 443              	ADC_Stop:
 444              	.LFB4:
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 15


 348:.\Generated_Source\PSoC4/ADC.c **** 
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC.c **** *
 354:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC.c **** *
 361:.\Generated_Source\PSoC4/ADC.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC.c **** *
 364:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:.\Generated_Source\PSoC4/ADC.c **** {
 445              		.loc 1 366 0
 446              		.cfi_startproc
 447 0000 80B5     		push	{r7, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 00AF     		add	r7, sp, #0
 452              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 453              		.loc 1 367 0
 454 0004 034B     		ldr	r3, .L25
 455 0006 034A     		ldr	r2, .L25
 456 0008 1268     		ldr	r2, [r2]
 457 000a 5200     		lsl	r2, r2, #1
 458 000c 5208     		lsr	r2, r2, #1
 459 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC.c **** }
 460              		.loc 1 368 0
 461 0010 BD46     		mov	sp, r7
 462              		@ sp needed
 463 0012 80BD     		pop	{r7, pc}
 464              	.L26:
 465              		.align	2
 466              	.L25:
 467 0014 00003A40 		.word	1077542912
 468              		.cfi_endproc
 469              	.LFE4:
 470              		.size	ADC_Stop, .-ADC_Stop
 471              		.section	.text.ADC_StartConvert,"ax",%progbits
 472              		.align	2
 473              		.global	ADC_StartConvert
 474              		.code	16
 475              		.thumb_func
 476              		.type	ADC_StartConvert, %function
 477              	ADC_StartConvert:
 478              	.LFB5:
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 16


 371:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC.c **** *
 375:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC.c **** *
 384:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC.c **** *
 387:.\Generated_Source\PSoC4/ADC.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC.c **** *
 390:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC.c **** {
 479              		.loc 1 392 0
 480              		.cfi_startproc
 481 0000 80B5     		push	{r7, lr}
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 487              		.loc 1 394 0
 488 0004 044B     		ldr	r3, .L28
 489 0006 044A     		ldr	r2, .L28
 490 0008 1268     		ldr	r2, [r2]
 491 000a 8021     		mov	r1, #128
 492 000c 4902     		lsl	r1, r1, #9
 493 000e 0A43     		orr	r2, r1
 494 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC.c **** 
 399:.\Generated_Source\PSoC4/ADC.c **** }
 495              		.loc 1 399 0
 496 0012 BD46     		mov	sp, r7
 497              		@ sp needed
 498 0014 80BD     		pop	{r7, pc}
 499              	.L29:
 500 0016 C046     		.align	2
 501              	.L28:
 502 0018 04003A40 		.word	1077542916
 503              		.cfi_endproc
 504              	.LFE5:
 505              		.size	ADC_StartConvert, .-ADC_StartConvert
 506              		.section	.text.ADC_StopConvert,"ax",%progbits
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 17


 507              		.align	2
 508              		.global	ADC_StopConvert
 509              		.code	16
 510              		.thumb_func
 511              		.type	ADC_StopConvert, %function
 512              	ADC_StopConvert:
 513              	.LFB6:
 400:.\Generated_Source\PSoC4/ADC.c **** 
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC.c **** *
 406:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC.c **** *
 409:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC.c **** *
 412:.\Generated_Source\PSoC4/ADC.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC.c **** *
 415:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC.c **** {
 514              		.loc 1 417 0
 515              		.cfi_startproc
 516 0000 80B5     		push	{r7, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 00AF     		add	r7, sp, #0
 521              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 522              		.loc 1 419 0
 523 0004 034B     		ldr	r3, .L31
 524 0006 034A     		ldr	r2, .L31
 525 0008 1268     		ldr	r2, [r2]
 526 000a 0349     		ldr	r1, .L31+4
 527 000c 0A40     		and	r2, r1
 528 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC.c **** }
 529              		.loc 1 421 0
 530 0010 BD46     		mov	sp, r7
 531              		@ sp needed
 532 0012 80BD     		pop	{r7, pc}
 533              	.L32:
 534              		.align	2
 535              	.L31:
 536 0014 04003A40 		.word	1077542916
 537 0018 FFFFFEFF 		.word	-65537
 538              		.cfi_endproc
 539              	.LFE6:
 540              		.size	ADC_StopConvert, .-ADC_StopConvert
 541              		.section	.text.ADC_IsEndConversion,"ax",%progbits
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 18


 542              		.align	2
 543              		.global	ADC_IsEndConversion
 544              		.code	16
 545              		.thumb_func
 546              		.type	ADC_IsEndConversion, %function
 547              	ADC_IsEndConversion:
 548              	.LFB7:
 422:.\Generated_Source\PSoC4/ADC.c **** 
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC.c **** *
 428:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC.c **** *
 437:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC.c **** *
 445:.\Generated_Source\PSoC4/ADC.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC.c **** *
 449:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC.c **** {
 549              		.loc 1 451 0
 550              		.cfi_startproc
 551 0000 80B5     		push	{r7, lr}
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 84B0     		sub	sp, sp, #16
 556              		.cfi_def_cfa_offset 24
 557 0004 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 559 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 560              		.loc 1 452 0
 561 0008 0023     		mov	r3, #0
 562 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 563              		.loc 1 454 0
 564 000c 7B68     		ldr	r3, [r7, #4]
 565 000e 0322     		mov	r2, #3
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 19


 566 0010 1340     		and	r3, r2
 567 0012 11D0     		beq	.L34
 568              	.L36:
 455:.\Generated_Source\PSoC4/ADC.c ****     {
 456:.\Generated_Source\PSoC4/ADC.c ****         do
 457:.\Generated_Source\PSoC4/ADC.c ****         {
 458:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 569              		.loc 1 458 0 discriminator 2
 570 0014 0B4B     		ldr	r3, .L38
 571 0016 1B68     		ldr	r3, [r3]
 572 0018 0122     		mov	r2, #1
 573 001a 1340     		and	r3, r2
 574 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 575              		.loc 1 459 0 discriminator 2
 576 001e FB68     		ldr	r3, [r7, #12]
 577 0020 002B     		cmp	r3, #0
 578 0022 03D1     		bne	.L35
 579              		.loc 1 459 0 is_stmt 0 discriminator 1
 580 0024 7B68     		ldr	r3, [r7, #4]
 581 0026 0222     		mov	r2, #2
 582 0028 1340     		and	r3, r2
 583 002a F3D1     		bne	.L36
 584              	.L35:
 460:.\Generated_Source\PSoC4/ADC.c **** 
 461:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 585              		.loc 1 461 0 is_stmt 1
 586 002c FB68     		ldr	r3, [r7, #12]
 587 002e 002B     		cmp	r3, #0
 588 0030 02D0     		beq	.L34
 462:.\Generated_Source\PSoC4/ADC.c ****         {
 463:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 589              		.loc 1 464 0
 590 0032 044B     		ldr	r3, .L38
 591 0034 0122     		mov	r2, #1
 592 0036 1A60     		str	r2, [r3]
 593              	.L34:
 465:.\Generated_Source\PSoC4/ADC.c ****         }
 466:.\Generated_Source\PSoC4/ADC.c ****     }
 467:.\Generated_Source\PSoC4/ADC.c **** 
 468:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC.c ****         {
 471:.\Generated_Source\PSoC4/ADC.c ****             do
 472:.\Generated_Source\PSoC4/ADC.c ****             {
 473:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC.c **** 
 477:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC.c ****             {
 479:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC.c ****             }
 482:.\Generated_Source\PSoC4/ADC.c ****         }
 483:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 20


 484:.\Generated_Source\PSoC4/ADC.c **** 
 485:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 594              		.loc 1 485 0
 595 0038 FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC.c **** }
 596              		.loc 1 486 0
 597 003a 181C     		mov	r0, r3
 598 003c BD46     		mov	sp, r7
 599 003e 04B0     		add	sp, sp, #16
 600              		@ sp needed
 601 0040 80BD     		pop	{r7, pc}
 602              	.L39:
 603 0042 C046     		.align	2
 604              	.L38:
 605 0044 10023A40 		.word	1077543440
 606              		.cfi_endproc
 607              	.LFE7:
 608              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 609              		.section	.text.ADC_GetResult16,"ax",%progbits
 610              		.align	2
 611              		.global	ADC_GetResult16
 612              		.code	16
 613              		.thumb_func
 614              		.type	ADC_GetResult16, %function
 615              	ADC_GetResult16:
 616              	.LFB8:
 487:.\Generated_Source\PSoC4/ADC.c **** 
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC.c **** *
 493:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC.c **** *
 496:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC.c **** *
 500:.\Generated_Source\PSoC4/ADC.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC.c **** *
 503:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC.c **** {
 617              		.loc 1 505 0
 618              		.cfi_startproc
 619 0000 80B5     		push	{r7, lr}
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 7, -8
 622              		.cfi_offset 14, -4
 623 0002 84B0     		sub	sp, sp, #16
 624              		.cfi_def_cfa_offset 24
 625 0004 00AF     		add	r7, sp, #0
 626              		.cfi_def_cfa_register 7
 627 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 21


 507:.\Generated_Source\PSoC4/ADC.c **** 
 508:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 628              		.loc 1 509 0
 629 0008 7B68     		ldr	r3, [r7, #4]
 630 000a 022B     		cmp	r3, #2
 631 000c 02D9     		bls	.L41
 632              		.loc 1 509 0 is_stmt 0 discriminator 1
 633 000e 0020     		mov	r0, #0
 634 0010 FFF7FEFF 		bl	CyHalt
 635              	.L41:
 510:.\Generated_Source\PSoC4/ADC.c **** 
 511:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 636              		.loc 1 511 0 is_stmt 1
 637 0014 7B68     		ldr	r3, [r7, #4]
 638 0016 022B     		cmp	r3, #2
 639 0018 09D8     		bhi	.L42
 512:.\Generated_Source\PSoC4/ADC.c ****     {
 513:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 640              		.loc 1 513 0
 641 001a 7B68     		ldr	r3, [r7, #4]
 642 001c 9B00     		lsl	r3, r3, #2
 643 001e 084A     		ldr	r2, .L45
 644 0020 9446     		mov	ip, r2
 645 0022 6344     		add	r3, r3, ip
 646 0024 1B68     		ldr	r3, [r3]
 647 0026 1B04     		lsl	r3, r3, #16
 648 0028 1B0C     		lsr	r3, r3, #16
 649 002a FB60     		str	r3, [r7, #12]
 650 002c 01E0     		b	.L43
 651              	.L42:
 514:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC.c ****     }
 516:.\Generated_Source\PSoC4/ADC.c ****     else
 517:.\Generated_Source\PSoC4/ADC.c ****     {
 518:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC.c ****         #else
 521:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 652              		.loc 1 521 0
 653 002e 0023     		mov	r3, #0
 654 0030 FB60     		str	r3, [r7, #12]
 655              	.L43:
 522:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC.c ****     }
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 656              		.loc 1 525 0
 657 0032 FB68     		ldr	r3, [r7, #12]
 658 0034 9BB2     		uxth	r3, r3
 659 0036 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC.c **** }
 660              		.loc 1 526 0
 661 0038 181C     		mov	r0, r3
 662 003a BD46     		mov	sp, r7
 663 003c 04B0     		add	sp, sp, #16
 664              		@ sp needed
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 22


 665 003e 80BD     		pop	{r7, pc}
 666              	.L46:
 667              		.align	2
 668              	.L45:
 669 0040 80013A40 		.word	1077543296
 670              		.cfi_endproc
 671              	.LFE8:
 672              		.size	ADC_GetResult16, .-ADC_GetResult16
 673              		.section	.text.ADC_SetChanMask,"ax",%progbits
 674              		.align	2
 675              		.global	ADC_SetChanMask
 676              		.code	16
 677              		.thumb_func
 678              		.type	ADC_SetChanMask, %function
 679              	ADC_SetChanMask:
 680              	.LFB9:
 527:.\Generated_Source\PSoC4/ADC.c **** 
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC.c **** *
 533:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC.c **** *
 536:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC.c **** *
 545:.\Generated_Source\PSoC4/ADC.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC.c **** {
 681              		.loc 1 550 0
 682              		.cfi_startproc
 683 0000 80B5     		push	{r7, lr}
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 7, -8
 686              		.cfi_offset 14, -4
 687 0002 82B0     		sub	sp, sp, #8
 688              		.cfi_def_cfa_offset 16
 689 0004 00AF     		add	r7, sp, #0
 690              		.cfi_def_cfa_register 7
 691 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 692              		.loc 1 551 0
 693 0008 034B     		ldr	r3, .L48
 694 000a 7A68     		ldr	r2, [r7, #4]
 695 000c 0721     		mov	r1, #7
 696 000e 0A40     		and	r2, r1
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 23


 697 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC.c **** }
 698              		.loc 1 552 0
 699 0012 BD46     		mov	sp, r7
 700 0014 02B0     		add	sp, sp, #8
 701              		@ sp needed
 702 0016 80BD     		pop	{r7, pc}
 703              	.L49:
 704              		.align	2
 705              	.L48:
 706 0018 20003A40 		.word	1077542944
 707              		.cfi_endproc
 708              	.LFE9:
 709              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 710              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 711              		.align	2
 712              		.global	ADC_SetLowLimit
 713              		.code	16
 714              		.thumb_func
 715              		.type	ADC_SetLowLimit, %function
 716              	ADC_SetLowLimit:
 717              	.LFB10:
 553:.\Generated_Source\PSoC4/ADC.c **** 
 554:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC.c **** 
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC.c ****     *
 561:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC.c ****     *
 564:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC.c ****     *
 567:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC.c ****     *
 570:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC.c ****     {
 573:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC.c ****     }
 575:.\Generated_Source\PSoC4/ADC.c **** 
 576:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC.c **** 
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC.c **** *
 583:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC.c **** *
 586:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 24


 588:.\Generated_Source\PSoC4/ADC.c **** *
 589:.\Generated_Source\PSoC4/ADC.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC.c **** *
 592:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC.c **** {
 718              		.loc 1 594 0
 719              		.cfi_startproc
 720 0000 80B5     		push	{r7, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 7, -8
 723              		.cfi_offset 14, -4
 724 0002 82B0     		sub	sp, sp, #8
 725              		.cfi_def_cfa_offset 16
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 729              		.loc 1 595 0
 730 0008 084B     		ldr	r3, .L51
 731 000a 084A     		ldr	r2, .L51
 732 000c 1268     		ldr	r2, [r2]
 733 000e 120C     		lsr	r2, r2, #16
 734 0010 1204     		lsl	r2, r2, #16
 735 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 736              		.loc 1 596 0
 737 0014 054B     		ldr	r3, .L51
 738 0016 054A     		ldr	r2, .L51
 739 0018 1168     		ldr	r1, [r2]
 740 001a 7A68     		ldr	r2, [r7, #4]
 741 001c 1204     		lsl	r2, r2, #16
 742 001e 120C     		lsr	r2, r2, #16
 743 0020 0A43     		orr	r2, r1
 744 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c **** }
 745              		.loc 1 597 0
 746 0024 BD46     		mov	sp, r7
 747 0026 02B0     		add	sp, sp, #8
 748              		@ sp needed
 749 0028 80BD     		pop	{r7, pc}
 750              	.L52:
 751 002a C046     		.align	2
 752              	.L51:
 753 002c 18003A40 		.word	1077542936
 754              		.cfi_endproc
 755              	.LFE10:
 756              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 757              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 758              		.align	2
 759              		.global	ADC_SetHighLimit
 760              		.code	16
 761              		.thumb_func
 762              		.type	ADC_SetHighLimit, %function
 763              	ADC_SetHighLimit:
 764              	.LFB11:
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 25


 598:.\Generated_Source\PSoC4/ADC.c **** 
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC.c **** *
 604:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC.c **** *
 607:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC.c **** *
 610:.\Generated_Source\PSoC4/ADC.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC.c **** {
 765              		.loc 1 615 0
 766              		.cfi_startproc
 767 0000 80B5     		push	{r7, lr}
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 82B0     		sub	sp, sp, #8
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 776              		.loc 1 616 0
 777 0008 074B     		ldr	r3, .L54
 778 000a 074A     		ldr	r2, .L54
 779 000c 1268     		ldr	r2, [r2]
 780 000e 1204     		lsl	r2, r2, #16
 781 0010 120C     		lsr	r2, r2, #16
 782 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 783              		.loc 1 617 0
 784 0014 044B     		ldr	r3, .L54
 785 0016 044A     		ldr	r2, .L54
 786 0018 1168     		ldr	r1, [r2]
 787 001a 7A68     		ldr	r2, [r7, #4]
 788 001c 1204     		lsl	r2, r2, #16
 789 001e 0A43     		orr	r2, r1
 790 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c **** }
 791              		.loc 1 618 0
 792 0022 BD46     		mov	sp, r7
 793 0024 02B0     		add	sp, sp, #8
 794              		@ sp needed
 795 0026 80BD     		pop	{r7, pc}
 796              	.L55:
 797              		.align	2
 798              	.L54:
 799 0028 18003A40 		.word	1077542936
 800              		.cfi_endproc
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 26


 801              	.LFE11:
 802              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 803              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 804              		.align	2
 805              		.global	ADC_SetLimitMask
 806              		.code	16
 807              		.thumb_func
 808              		.type	ADC_SetLimitMask, %function
 809              	ADC_SetLimitMask:
 810              	.LFB12:
 619:.\Generated_Source\PSoC4/ADC.c **** 
 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC.c **** *
 634:.\Generated_Source\PSoC4/ADC.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC.c **** *
 637:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC.c **** {
 811              		.loc 1 639 0
 812              		.cfi_startproc
 813 0000 80B5     		push	{r7, lr}
 814              		.cfi_def_cfa_offset 8
 815              		.cfi_offset 7, -8
 816              		.cfi_offset 14, -4
 817 0002 82B0     		sub	sp, sp, #8
 818              		.cfi_def_cfa_offset 16
 819 0004 00AF     		add	r7, sp, #0
 820              		.cfi_def_cfa_register 7
 821 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 822              		.loc 1 640 0
 823 0008 034B     		ldr	r3, .L57
 824 000a 7A68     		ldr	r2, [r7, #4]
 825 000c 0721     		mov	r1, #7
 826 000e 0A40     		and	r2, r1
 827 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC.c **** }
 828              		.loc 1 641 0
 829 0012 BD46     		mov	sp, r7
 830 0014 02B0     		add	sp, sp, #8
 831              		@ sp needed
 832 0016 80BD     		pop	{r7, pc}
 833              	.L58:
 834              		.align	2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 27


 835              	.L57:
 836 0018 38023A40 		.word	1077543480
 837              		.cfi_endproc
 838              	.LFE12:
 839              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 840              		.section	.text.ADC_SetSatMask,"ax",%progbits
 841              		.align	2
 842              		.global	ADC_SetSatMask
 843              		.code	16
 844              		.thumb_func
 845              		.type	ADC_SetSatMask, %function
 846              	ADC_SetSatMask:
 847              	.LFB13:
 642:.\Generated_Source\PSoC4/ADC.c **** 
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC.c **** *
 648:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC.c **** *
 651:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC.c **** *
 657:.\Generated_Source\PSoC4/ADC.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC.c **** *
 660:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC.c **** {
 848              		.loc 1 662 0
 849              		.cfi_startproc
 850 0000 80B5     		push	{r7, lr}
 851              		.cfi_def_cfa_offset 8
 852              		.cfi_offset 7, -8
 853              		.cfi_offset 14, -4
 854 0002 82B0     		sub	sp, sp, #8
 855              		.cfi_def_cfa_offset 16
 856 0004 00AF     		add	r7, sp, #0
 857              		.cfi_def_cfa_register 7
 858 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 859              		.loc 1 663 0
 860 0008 034B     		ldr	r3, .L60
 861 000a 7A68     		ldr	r2, [r7, #4]
 862 000c 0721     		mov	r1, #7
 863 000e 0A40     		and	r2, r1
 864 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC.c **** }
 865              		.loc 1 664 0
 866 0012 BD46     		mov	sp, r7
 867 0014 02B0     		add	sp, sp, #8
 868              		@ sp needed
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 28


 869 0016 80BD     		pop	{r7, pc}
 870              	.L61:
 871              		.align	2
 872              	.L60:
 873 0018 28023A40 		.word	1077543464
 874              		.cfi_endproc
 875              	.LFE13:
 876              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 877              		.section	.text.ADC_SetOffset,"ax",%progbits
 878              		.align	2
 879              		.global	ADC_SetOffset
 880              		.code	16
 881              		.thumb_func
 882              		.type	ADC_SetOffset, %function
 883              	ADC_SetOffset:
 884              	.LFB14:
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC.c **** *
 671:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC.c **** *
 677:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC.c **** *
 682:.\Generated_Source\PSoC4/ADC.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC.c **** *
 685:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC.c **** *
 688:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC.c **** {
 885              		.loc 1 690 0
 886              		.cfi_startproc
 887 0000 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 82B0     		sub	sp, sp, #8
 892              		.cfi_def_cfa_offset 16
 893 0004 00AF     		add	r7, sp, #0
 894              		.cfi_def_cfa_register 7
 895 0006 7860     		str	r0, [r7, #4]
 896 0008 0A1C     		mov	r2, r1
 897 000a BB1C     		add	r3, r7, #2
 898 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 29


 692:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 899              		.loc 1 692 0
 900 000e 7B68     		ldr	r3, [r7, #4]
 901 0010 022B     		cmp	r3, #2
 902 0012 02D9     		bls	.L63
 903              		.loc 1 692 0 is_stmt 0 discriminator 1
 904 0014 0020     		mov	r0, #0
 905 0016 FFF7FEFF 		bl	CyHalt
 906              	.L63:
 693:.\Generated_Source\PSoC4/ADC.c **** 
 694:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 907              		.loc 1 694 0 is_stmt 1
 908 001a 044B     		ldr	r3, .L64
 909 001c 7A68     		ldr	r2, [r7, #4]
 910 001e 5200     		lsl	r2, r2, #1
 911 0020 B91C     		add	r1, r7, #2
 912 0022 0988     		ldrh	r1, [r1]
 913 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC.c **** }
 914              		.loc 1 695 0
 915 0026 BD46     		mov	sp, r7
 916 0028 02B0     		add	sp, sp, #8
 917              		@ sp needed
 918 002a 80BD     		pop	{r7, pc}
 919              	.L65:
 920              		.align	2
 921              	.L64:
 922 002c 00000000 		.word	ADC_offset
 923              		.cfi_endproc
 924              	.LFE14:
 925              		.size	ADC_SetOffset, .-ADC_SetOffset
 926              		.section	.text.ADC_SetGain,"ax",%progbits
 927              		.align	2
 928              		.global	ADC_SetGain
 929              		.code	16
 930              		.thumb_func
 931              		.type	ADC_SetGain, %function
 932              	ADC_SetGain:
 933              	.LFB15:
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c **** *
 702:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC.c **** *
 711:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 30


 714:.\Generated_Source\PSoC4/ADC.c **** *
 715:.\Generated_Source\PSoC4/ADC.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC.c **** *
 718:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC.c **** *
 722:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC.c **** {
 934              		.loc 1 724 0
 935              		.cfi_startproc
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 82B0     		sub	sp, sp, #8
 941              		.cfi_def_cfa_offset 16
 942 0004 00AF     		add	r7, sp, #0
 943              		.cfi_def_cfa_register 7
 944 0006 7860     		str	r0, [r7, #4]
 945 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 946              		.loc 1 726 0
 947 000a 7B68     		ldr	r3, [r7, #4]
 948 000c 022B     		cmp	r3, #2
 949 000e 02D9     		bls	.L67
 950              		.loc 1 726 0 is_stmt 0 discriminator 1
 951 0010 0020     		mov	r0, #0
 952 0012 FFF7FEFF 		bl	CyHalt
 953              	.L67:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 954              		.loc 1 728 0 is_stmt 1
 955 0016 044B     		ldr	r3, .L68
 956 0018 7A68     		ldr	r2, [r7, #4]
 957 001a 9200     		lsl	r2, r2, #2
 958 001c 3968     		ldr	r1, [r7]
 959 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC.c **** }
 960              		.loc 1 729 0
 961 0020 BD46     		mov	sp, r7
 962 0022 02B0     		add	sp, sp, #8
 963              		@ sp needed
 964 0024 80BD     		pop	{r7, pc}
 965              	.L69:
 966 0026 C046     		.align	2
 967              	.L68:
 968 0028 00000000 		.word	ADC_countsPer10Volt
 969              		.cfi_endproc
 970              	.LFE15:
 971              		.size	ADC_SetGain, .-ADC_SetGain
 972              		.global	__aeabi_idiv
 973              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 974              		.align	2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 31


 975              		.global	ADC_CountsTo_mVolts
 976              		.code	16
 977              		.thumb_func
 978              		.type	ADC_CountsTo_mVolts, %function
 979              	ADC_CountsTo_mVolts:
 980              	.LFB16:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:.\Generated_Source\PSoC4/ADC.c **** 
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC.c ****     *
 739:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC.c ****     *
 743:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC.c ****     *
 747:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     *
 750:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC.c ****     {
 981              		.loc 1 757 0
 982              		.cfi_startproc
 983 0000 80B5     		push	{r7, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 0002 84B0     		sub	sp, sp, #16
 988              		.cfi_def_cfa_offset 24
 989 0004 00AF     		add	r7, sp, #0
 990              		.cfi_def_cfa_register 7
 991 0006 7860     		str	r0, [r7, #4]
 992 0008 0A1C     		mov	r2, r1
 993 000a BB1C     		add	r3, r7, #2
 994 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC.c **** 
 760:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 995              		.loc 1 761 0
 996 000e 7B68     		ldr	r3, [r7, #4]
 997 0010 022B     		cmp	r3, #2
 998 0012 02D9     		bls	.L71
 999              		.loc 1 761 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 32


 1000 0014 0020     		mov	r0, #0
 1001 0016 FFF7FEFF 		bl	CyHalt
 1002              	.L71:
 762:.\Generated_Source\PSoC4/ADC.c **** 
 763:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC.c ****             {
 767:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC.c ****             }
 769:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC.c **** 
 771:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1003              		.loc 1 772 0 is_stmt 1
 1004 001a 1F4B     		ldr	r3, .L77
 1005 001c 7A68     		ldr	r2, [r7, #4]
 1006 001e 5200     		lsl	r2, r2, #1
 1007 0020 D35A     		ldrh	r3, [r2, r3]
 1008 0022 99B2     		uxth	r1, r3
 1009 0024 BB1C     		add	r3, r7, #2
 1010 0026 1A88     		ldrh	r2, [r3]
 1011 0028 8BB2     		uxth	r3, r1
 1012 002a D31A     		sub	r3, r2, r3
 1013 002c 9AB2     		uxth	r2, r3
 1014 002e BB1C     		add	r3, r7, #2
 1015 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC.c **** 
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1016              		.loc 1 774 0
 1017 0032 BB1C     		add	r3, r7, #2
 1018 0034 0022     		mov	r2, #0
 1019 0036 9B5E     		ldrsh	r3, [r3, r2]
 1020 0038 184A     		ldr	r2, .L77+4
 1021 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1022              		.loc 1 775 0
 1023 003c BB1C     		add	r3, r7, #2
 1024 003e 0021     		mov	r1, #0
 1025 0040 5B5E     		ldrsh	r3, [r3, r1]
 1026 0042 002B     		cmp	r3, #0
 1027 0044 08DD     		ble	.L72
 1028              		.loc 1 775 0 is_stmt 0 discriminator 1
 1029 0046 164B     		ldr	r3, .L77+8
 1030 0048 7968     		ldr	r1, [r7, #4]
 1031 004a 8900     		lsl	r1, r1, #2
 1032 004c CB58     		ldr	r3, [r1, r3]
 1033 004e 002B     		cmp	r3, #0
 1034 0050 00DA     		bge	.L73
 1035 0052 0133     		add	r3, r3, #1
 1036              	.L73:
 1037 0054 5B10     		asr	r3, r3, #1
 1038 0056 08E0     		b	.L74
 1039              	.L72:
 1040              		.loc 1 775 0 discriminator 2
 1041 0058 114B     		ldr	r3, .L77+8
 1042 005a 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 33


 1043 005c 8900     		lsl	r1, r1, #2
 1044 005e CB58     		ldr	r3, [r1, r3]
 1045 0060 002B     		cmp	r3, #0
 1046 0062 00DA     		bge	.L75
 1047 0064 0133     		add	r3, r3, #1
 1048              	.L75:
 1049 0066 5B10     		asr	r3, r3, #1
 1050 0068 5B42     		neg	r3, r3
 1051              	.L74:
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1052              		.loc 1 774 0 is_stmt 1
 1053 006a D118     		add	r1, r2, r3
 776:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1054              		.loc 1 776 0
 1055 006c 0C4B     		ldr	r3, .L77+8
 1056 006e 7A68     		ldr	r2, [r7, #4]
 1057 0070 9200     		lsl	r2, r2, #2
 1058 0072 D358     		ldr	r3, [r2, r3]
 1059 0074 081C     		mov	r0, r1
 1060 0076 191C     		mov	r1, r3
 1061 0078 FFF7FEFF 		bl	__aeabi_idiv
 1062 007c 031C     		mov	r3, r0
 1063 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1064              		.loc 1 774 0
 1065 0080 0E23     		mov	r3, #14
 1066 0082 FB18     		add	r3, r7, r3
 1067 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c **** 
 778:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1068              		.loc 1 778 0
 1069 0086 0E23     		mov	r3, #14
 1070 0088 FB18     		add	r3, r7, r3
 1071 008a 1B88     		ldrh	r3, [r3]
 1072 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC.c ****     }
 1073              		.loc 1 779 0
 1074 008e 181C     		mov	r0, r3
 1075 0090 BD46     		mov	sp, r7
 1076 0092 04B0     		add	sp, sp, #16
 1077              		@ sp needed
 1078 0094 80BD     		pop	{r7, pc}
 1079              	.L78:
 1080 0096 C046     		.align	2
 1081              	.L77:
 1082 0098 00000000 		.word	ADC_offset
 1083 009c 10270000 		.word	10000
 1084 00a0 00000000 		.word	ADC_countsPer10Volt
 1085              		.cfi_endproc
 1086              	.LFE16:
 1087              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1088              		.global	__aeabi_lmul
 1089              		.global	__aeabi_ldivmod
 1090              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1091              		.align	2
 1092              		.global	ADC_CountsTo_uVolts
 1093              		.code	16
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 34


 1094              		.thumb_func
 1095              		.type	ADC_CountsTo_uVolts, %function
 1096              	ADC_CountsTo_uVolts:
 1097              	.LFB17:
 780:.\Generated_Source\PSoC4/ADC.c **** 
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC.c ****     *
 786:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC.c ****     *
 790:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC.c ****     *
 794:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC.c ****     *
 797:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC.c ****     *
 802:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC.c ****     *
 809:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC.c ****     {
 1098              		.loc 1 811 0
 1099              		.cfi_startproc
 1100 0000 B0B5     		push	{r4, r5, r7, lr}
 1101              		.cfi_def_cfa_offset 16
 1102              		.cfi_offset 4, -16
 1103              		.cfi_offset 5, -12
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 1106 0002 86B0     		sub	sp, sp, #24
 1107              		.cfi_def_cfa_offset 40
 1108 0004 00AF     		add	r7, sp, #0
 1109              		.cfi_def_cfa_register 7
 1110 0006 F860     		str	r0, [r7, #12]
 1111 0008 0A1C     		mov	r2, r1
 1112 000a 0A23     		mov	r3, #10
 1113 000c FB18     		add	r3, r7, r3
 1114 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC.c **** 
 814:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 35


 1115              		.loc 1 815 0
 1116 0010 FB68     		ldr	r3, [r7, #12]
 1117 0012 022B     		cmp	r3, #2
 1118 0014 02D9     		bls	.L80
 1119              		.loc 1 815 0 is_stmt 0 discriminator 1
 1120 0016 0020     		mov	r0, #0
 1121 0018 FFF7FEFF 		bl	CyHalt
 1122              	.L80:
 816:.\Generated_Source\PSoC4/ADC.c **** 
 817:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC.c ****             {
 821:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC.c ****             }
 823:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC.c **** 
 825:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1123              		.loc 1 826 0 is_stmt 1
 1124 001c 194B     		ldr	r3, .L82
 1125 001e FA68     		ldr	r2, [r7, #12]
 1126 0020 5200     		lsl	r2, r2, #1
 1127 0022 D35A     		ldrh	r3, [r2, r3]
 1128 0024 99B2     		uxth	r1, r3
 1129 0026 0A23     		mov	r3, #10
 1130 0028 FB18     		add	r3, r7, r3
 1131 002a 1A88     		ldrh	r2, [r3]
 1132 002c 8BB2     		uxth	r3, r1
 1133 002e D31A     		sub	r3, r2, r3
 1134 0030 9AB2     		uxth	r2, r3
 1135 0032 0A23     		mov	r3, #10
 1136 0034 FB18     		add	r3, r7, r3
 1137 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC.c **** 
 828:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1138              		.loc 1 828 0
 1139 0038 0A23     		mov	r3, #10
 1140 003a FB18     		add	r3, r7, r3
 1141 003c 1B88     		ldrh	r3, [r3]
 1142 003e 1BB2     		sxth	r3, r3
 1143 0040 3B60     		str	r3, [r7]
 1144 0042 DB17     		asr	r3, r3, #31
 1145 0044 7B60     		str	r3, [r7, #4]
 1146 0046 3868     		ldr	r0, [r7]
 1147 0048 7968     		ldr	r1, [r7, #4]
 1148 004a 0F4A     		ldr	r2, .L82+4
 1149 004c 0023     		mov	r3, #0
 1150 004e FFF7FEFF 		bl	__aeabi_lmul
 1151 0052 021C     		mov	r2, r0
 1152 0054 0B1C     		mov	r3, r1
 1153 0056 101C     		mov	r0, r2
 1154 0058 191C     		mov	r1, r3
 1155 005a 0C4B     		ldr	r3, .L82+8
 1156 005c FA68     		ldr	r2, [r7, #12]
 1157 005e 9200     		lsl	r2, r2, #2
 1158 0060 D358     		ldr	r3, [r2, r3]
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 36


 1159 0062 1C1C     		mov	r4, r3
 1160 0064 DB17     		asr	r3, r3, #31
 1161 0066 1D1C     		mov	r5, r3
 1162 0068 221C     		mov	r2, r4
 1163 006a 2B1C     		mov	r3, r5
 1164 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1165 0070 031C     		mov	r3, r0
 1166 0072 0C1C     		mov	r4, r1
 1167 0074 3B61     		str	r3, [r7, #16]
 1168 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1169              		.loc 1 830 0
 1170 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC.c ****     }
 1171              		.loc 1 831 0
 1172 007a 181C     		mov	r0, r3
 1173 007c BD46     		mov	sp, r7
 1174 007e 06B0     		add	sp, sp, #24
 1175              		@ sp needed
 1176 0080 B0BD     		pop	{r4, r5, r7, pc}
 1177              	.L83:
 1178 0082 C046     		.align	2
 1179              	.L82:
 1180 0084 00000000 		.word	ADC_offset
 1181 0088 80969800 		.word	10000000
 1182 008c 00000000 		.word	ADC_countsPer10Volt
 1183              		.cfi_endproc
 1184              	.LFE17:
 1185              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1186              		.global	__aeabi_i2f
 1187              		.global	__aeabi_fmul
 1188              		.global	__aeabi_fdiv
 1189              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1190              		.align	2
 1191              		.global	ADC_CountsTo_Volts
 1192              		.code	16
 1193              		.thumb_func
 1194              		.type	ADC_CountsTo_Volts, %function
 1195              	ADC_CountsTo_Volts:
 1196              	.LFB18:
 832:.\Generated_Source\PSoC4/ADC.c **** 
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC.c ****     *
 838:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC.c ****     *
 842:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC.c ****     *
 846:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 37


 848:.\Generated_Source\PSoC4/ADC.c ****     *
 849:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC.c ****     *
 854:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC.c ****     {
 1197              		.loc 1 856 0
 1198              		.cfi_startproc
 1199 0000 90B5     		push	{r4, r7, lr}
 1200              		.cfi_def_cfa_offset 12
 1201              		.cfi_offset 4, -12
 1202              		.cfi_offset 7, -8
 1203              		.cfi_offset 14, -4
 1204 0002 85B0     		sub	sp, sp, #20
 1205              		.cfi_def_cfa_offset 32
 1206 0004 00AF     		add	r7, sp, #0
 1207              		.cfi_def_cfa_register 7
 1208 0006 7860     		str	r0, [r7, #4]
 1209 0008 0A1C     		mov	r2, r1
 1210 000a BB1C     		add	r3, r7, #2
 1211 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC.c **** 
 859:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1212              		.loc 1 860 0
 1213 000e 7B68     		ldr	r3, [r7, #4]
 1214 0010 022B     		cmp	r3, #2
 1215 0012 02D9     		bls	.L85
 1216              		.loc 1 860 0 is_stmt 0 discriminator 1
 1217 0014 0020     		mov	r0, #0
 1218 0016 FFF7FEFF 		bl	CyHalt
 1219              	.L85:
 861:.\Generated_Source\PSoC4/ADC.c **** 
 862:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC.c ****             {
 866:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC.c ****             }
 868:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC.c **** 
 870:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1220              		.loc 1 871 0 is_stmt 1
 1221 001a 164B     		ldr	r3, .L87
 1222 001c 7A68     		ldr	r2, [r7, #4]
 1223 001e 5200     		lsl	r2, r2, #1
 1224 0020 D35A     		ldrh	r3, [r2, r3]
 1225 0022 99B2     		uxth	r1, r3
 1226 0024 BB1C     		add	r3, r7, #2
 1227 0026 1A88     		ldrh	r2, [r3]
 1228 0028 8BB2     		uxth	r3, r1
 1229 002a D31A     		sub	r3, r2, r3
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 38


 1230 002c 9AB2     		uxth	r2, r3
 1231 002e BB1C     		add	r3, r7, #2
 1232 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC.c **** 
 873:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1233              		.loc 1 873 0
 1234 0032 BB1C     		add	r3, r7, #2
 1235 0034 0022     		mov	r2, #0
 1236 0036 9B5E     		ldrsh	r3, [r3, r2]
 1237 0038 181C     		mov	r0, r3
 1238 003a FFF7FEFF 		bl	__aeabi_i2f
 1239 003e 031C     		add	r3, r0, #0
 1240 0040 181C     		add	r0, r3, #0
 1241 0042 0D49     		ldr	r1, .L87+4
 1242 0044 FFF7FEFF 		bl	__aeabi_fmul
 1243 0048 031C     		add	r3, r0, #0
 1244 004a 1C1C     		add	r4, r3, #0
 1245 004c 0B4B     		ldr	r3, .L87+8
 1246 004e 7A68     		ldr	r2, [r7, #4]
 1247 0050 9200     		lsl	r2, r2, #2
 1248 0052 D358     		ldr	r3, [r2, r3]
 1249 0054 181C     		mov	r0, r3
 1250 0056 FFF7FEFF 		bl	__aeabi_i2f
 1251 005a 031C     		add	r3, r0, #0
 1252 005c 201C     		add	r0, r4, #0
 1253 005e 191C     		add	r1, r3, #0
 1254 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1255 0064 031C     		add	r3, r0, #0
 1256 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC.c **** 
 875:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1257              		.loc 1 875 0
 1258 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC.c ****     }
 1259              		.loc 1 876 0
 1260 006a 181C     		add	r0, r3, #0
 1261 006c BD46     		mov	sp, r7
 1262 006e 05B0     		add	sp, sp, #20
 1263              		@ sp needed
 1264 0070 90BD     		pop	{r4, r7, pc}
 1265              	.L88:
 1266 0072 C046     		.align	2
 1267              	.L87:
 1268 0074 00000000 		.word	ADC_offset
 1269 0078 00002041 		.word	1092616192
 1270 007c 00000000 		.word	ADC_countsPer10Volt
 1271              		.cfi_endproc
 1272              	.LFE18:
 1273              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1274              		.section	.rodata
 1275              		.align	2
 1276              		.type	ADC_InputsPlacement.4772, %object
 1277              		.size	ADC_InputsPlacement.4772, 3
 1278              	ADC_InputsPlacement.4772:
 1279 000c 00       		.byte	0
 1280 000d 01       		.byte	1
 1281 000e 02       		.byte	2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 39


 1282 000f 00       		.text
 1283              	.Letext0:
 1284              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1285              		.section	.debug_info,"",%progbits
 1286              	.Ldebug_info0:
 1287 0000 9D040000 		.4byte	0x49d
 1288 0004 0400     		.2byte	0x4
 1289 0006 00000000 		.4byte	.Ldebug_abbrev0
 1290 000a 04       		.byte	0x4
 1291 000b 01       		.uleb128 0x1
 1292 000c F1020000 		.4byte	.LASF60
 1293 0010 01       		.byte	0x1
 1294 0011 53020000 		.4byte	.LASF61
 1295 0015 49000000 		.4byte	.LASF62
 1296 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1297 001d 00000000 		.4byte	0
 1298 0021 00000000 		.4byte	.Ldebug_line0
 1299 0025 02       		.uleb128 0x2
 1300 0026 01       		.byte	0x1
 1301 0027 06       		.byte	0x6
 1302 0028 B7000000 		.4byte	.LASF0
 1303 002c 02       		.uleb128 0x2
 1304 002d 01       		.byte	0x1
 1305 002e 08       		.byte	0x8
 1306 002f 72020000 		.4byte	.LASF1
 1307 0033 02       		.uleb128 0x2
 1308 0034 02       		.byte	0x2
 1309 0035 05       		.byte	0x5
 1310 0036 8B020000 		.4byte	.LASF2
 1311 003a 02       		.uleb128 0x2
 1312 003b 02       		.byte	0x2
 1313 003c 07       		.byte	0x7
 1314 003d 8E010000 		.4byte	.LASF3
 1315 0041 02       		.uleb128 0x2
 1316 0042 04       		.byte	0x4
 1317 0043 05       		.byte	0x5
 1318 0044 DA000000 		.4byte	.LASF4
 1319 0048 02       		.uleb128 0x2
 1320 0049 04       		.byte	0x4
 1321 004a 07       		.byte	0x7
 1322 004b 5D010000 		.4byte	.LASF5
 1323 004f 02       		.uleb128 0x2
 1324 0050 08       		.byte	0x8
 1325 0051 05       		.byte	0x5
 1326 0052 A9000000 		.4byte	.LASF6
 1327 0056 02       		.uleb128 0x2
 1328 0057 08       		.byte	0x8
 1329 0058 07       		.byte	0x7
 1330 0059 32000000 		.4byte	.LASF7
 1331 005d 03       		.uleb128 0x3
 1332 005e 04       		.byte	0x4
 1333 005f 05       		.byte	0x5
 1334 0060 696E7400 		.ascii	"int\000"
 1335 0064 02       		.uleb128 0x2
 1336 0065 04       		.byte	0x4
 1337 0066 07       		.byte	0x7
 1338 0067 49010000 		.4byte	.LASF8
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 40


 1339 006b 04       		.uleb128 0x4
 1340 006c 0B010000 		.4byte	.LASF9
 1341 0070 02       		.byte	0x2
 1342 0071 3801     		.2byte	0x138
 1343 0073 2C000000 		.4byte	0x2c
 1344 0077 04       		.uleb128 0x4
 1345 0078 00000000 		.4byte	.LASF10
 1346 007c 02       		.byte	0x2
 1347 007d 3901     		.2byte	0x139
 1348 007f 3A000000 		.4byte	0x3a
 1349 0083 04       		.uleb128 0x4
 1350 0084 18010000 		.4byte	.LASF11
 1351 0088 02       		.byte	0x2
 1352 0089 3A01     		.2byte	0x13a
 1353 008b 48000000 		.4byte	0x48
 1354 008f 04       		.uleb128 0x4
 1355 0090 DD020000 		.4byte	.LASF12
 1356 0094 02       		.byte	0x2
 1357 0095 3C01     		.2byte	0x13c
 1358 0097 33000000 		.4byte	0x33
 1359 009b 04       		.uleb128 0x4
 1360 009c CA000000 		.4byte	.LASF13
 1361 00a0 02       		.byte	0x2
 1362 00a1 3D01     		.2byte	0x13d
 1363 00a3 41000000 		.4byte	0x41
 1364 00a7 04       		.uleb128 0x4
 1365 00a8 BE010000 		.4byte	.LASF14
 1366 00ac 02       		.byte	0x2
 1367 00ad 3E01     		.2byte	0x13e
 1368 00af B3000000 		.4byte	0xb3
 1369 00b3 02       		.uleb128 0x2
 1370 00b4 04       		.byte	0x4
 1371 00b5 04       		.byte	0x4
 1372 00b6 1F020000 		.4byte	.LASF15
 1373 00ba 02       		.uleb128 0x2
 1374 00bb 08       		.byte	0x8
 1375 00bc 04       		.byte	0x4
 1376 00bd 11010000 		.4byte	.LASF16
 1377 00c1 04       		.uleb128 0x4
 1378 00c2 FD010000 		.4byte	.LASF17
 1379 00c6 02       		.byte	0x2
 1380 00c7 4301     		.2byte	0x143
 1381 00c9 4F000000 		.4byte	0x4f
 1382 00cd 02       		.uleb128 0x2
 1383 00ce 01       		.byte	0x1
 1384 00cf 08       		.byte	0x8
 1385 00d0 A9020000 		.4byte	.LASF18
 1386 00d4 04       		.uleb128 0x4
 1387 00d5 B8010000 		.4byte	.LASF19
 1388 00d9 02       		.byte	0x2
 1389 00da E401     		.2byte	0x1e4
 1390 00dc E0000000 		.4byte	0xe0
 1391 00e0 05       		.uleb128 0x5
 1392 00e1 83000000 		.4byte	0x83
 1393 00e5 02       		.uleb128 0x2
 1394 00e6 04       		.byte	0x4
 1395 00e7 07       		.byte	0x7
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 41


 1396 00e8 C6010000 		.4byte	.LASF20
 1397 00ec 06       		.uleb128 0x6
 1398 00ed D0000000 		.4byte	.LASF25
 1399 00f1 01       		.byte	0x1
 1400 00f2 3F       		.byte	0x3f
 1401 00f3 00000000 		.4byte	.LFB1
 1402 00f7 24000000 		.4byte	.LFE1-.LFB1
 1403 00fb 01       		.uleb128 0x1
 1404 00fc 9C       		.byte	0x9c
 1405 00fd 07       		.uleb128 0x7
 1406 00fe 29000000 		.4byte	.LASF36
 1407 0102 01       		.byte	0x1
 1408 0103 5E       		.byte	0x5e
 1409 0104 00000000 		.4byte	.LFB2
 1410 0108 10020000 		.4byte	.LFE2-.LFB2
 1411 010c 01       		.uleb128 0x1
 1412 010d 9C       		.byte	0x9c
 1413 010e 4E010000 		.4byte	0x14e
 1414 0112 08       		.uleb128 0x8
 1415 0113 9E020000 		.4byte	.LASF21
 1416 0117 01       		.byte	0x1
 1417 0118 60       		.byte	0x60
 1418 0119 83000000 		.4byte	0x83
 1419 011d 02       		.uleb128 0x2
 1420 011e 91       		.byte	0x91
 1421 011f 74       		.sleb128 -12
 1422 0120 08       		.uleb128 0x8
 1423 0121 84010000 		.4byte	.LASF22
 1424 0125 01       		.byte	0x1
 1425 0126 61       		.byte	0x61
 1426 0127 83000000 		.4byte	0x83
 1427 012b 02       		.uleb128 0x2
 1428 012c 91       		.byte	0x91
 1429 012d 6C       		.sleb128 -20
 1430 012e 08       		.uleb128 0x8
 1431 012f 0F000000 		.4byte	.LASF23
 1432 0133 01       		.byte	0x1
 1433 0134 62       		.byte	0x62
 1434 0135 9B000000 		.4byte	0x9b
 1435 0139 02       		.uleb128 0x2
 1436 013a 91       		.byte	0x91
 1437 013b 70       		.sleb128 -16
 1438 013c 08       		.uleb128 0x8
 1439 013d 84000000 		.4byte	.LASF24
 1440 0141 01       		.byte	0x1
 1441 0142 65       		.byte	0x65
 1442 0143 5E010000 		.4byte	0x15e
 1443 0147 05       		.uleb128 0x5
 1444 0148 03       		.byte	0x3
 1445 0149 0C000000 		.4byte	ADC_InputsPlacement.4772
 1446 014d 00       		.byte	0
 1447 014e 09       		.uleb128 0x9
 1448 014f 6B000000 		.4byte	0x6b
 1449 0153 5E010000 		.4byte	0x15e
 1450 0157 0A       		.uleb128 0xa
 1451 0158 E5000000 		.4byte	0xe5
 1452 015c 02       		.byte	0x2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 42


 1453 015d 00       		.byte	0
 1454 015e 0B       		.uleb128 0xb
 1455 015f 4E010000 		.4byte	0x14e
 1456 0163 0C       		.uleb128 0xc
 1457 0164 D2020000 		.4byte	.LASF26
 1458 0168 01       		.byte	0x1
 1459 0169 4A01     		.2byte	0x14a
 1460 016b 00000000 		.4byte	.LFB3
 1461 016f 38000000 		.4byte	.LFE3-.LFB3
 1462 0173 01       		.uleb128 0x1
 1463 0174 9C       		.byte	0x9c
 1464 0175 0D       		.uleb128 0xd
 1465 0176 95020000 		.4byte	.LASF27
 1466 017a 01       		.byte	0x1
 1467 017b 6D01     		.2byte	0x16d
 1468 017d 00000000 		.4byte	.LFB4
 1469 0181 18000000 		.4byte	.LFE4-.LFB4
 1470 0185 01       		.uleb128 0x1
 1471 0186 9C       		.byte	0x9c
 1472 0187 0D       		.uleb128 0xd
 1473 0188 98000000 		.4byte	.LASF28
 1474 018c 01       		.byte	0x1
 1475 018d 8701     		.2byte	0x187
 1476 018f 00000000 		.4byte	.LFB5
 1477 0193 1C000000 		.4byte	.LFE5-.LFB5
 1478 0197 01       		.uleb128 0x1
 1479 0198 9C       		.byte	0x9c
 1480 0199 0D       		.uleb128 0xd
 1481 019a A1010000 		.4byte	.LASF29
 1482 019e 01       		.byte	0x1
 1483 019f A001     		.2byte	0x1a0
 1484 01a1 00000000 		.4byte	.LFB6
 1485 01a5 1C000000 		.4byte	.LFE6-.LFB6
 1486 01a9 01       		.uleb128 0x1
 1487 01aa 9C       		.byte	0x9c
 1488 01ab 0E       		.uleb128 0xe
 1489 01ac E9010000 		.4byte	.LASF31
 1490 01b0 01       		.byte	0x1
 1491 01b1 C201     		.2byte	0x1c2
 1492 01b3 83000000 		.4byte	0x83
 1493 01b7 00000000 		.4byte	.LFB7
 1494 01bb 48000000 		.4byte	.LFE7-.LFB7
 1495 01bf 01       		.uleb128 0x1
 1496 01c0 9C       		.byte	0x9c
 1497 01c1 E4010000 		.4byte	0x1e4
 1498 01c5 0F       		.uleb128 0xf
 1499 01c6 30010000 		.4byte	.LASF33
 1500 01ca 01       		.byte	0x1
 1501 01cb C201     		.2byte	0x1c2
 1502 01cd 83000000 		.4byte	0x83
 1503 01d1 02       		.uleb128 0x2
 1504 01d2 91       		.byte	0x91
 1505 01d3 6C       		.sleb128 -20
 1506 01d4 10       		.uleb128 0x10
 1507 01d5 C3000000 		.4byte	.LASF30
 1508 01d9 01       		.byte	0x1
 1509 01da C401     		.2byte	0x1c4
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 43


 1510 01dc 83000000 		.4byte	0x83
 1511 01e0 02       		.uleb128 0x2
 1512 01e1 91       		.byte	0x91
 1513 01e2 74       		.sleb128 -12
 1514 01e3 00       		.byte	0
 1515 01e4 11       		.uleb128 0x11
 1516 01e5 86030000 		.4byte	.LASF32
 1517 01e9 01       		.byte	0x1
 1518 01ea F801     		.2byte	0x1f8
 1519 01ec 8F000000 		.4byte	0x8f
 1520 01f0 00000000 		.4byte	.LFB8
 1521 01f4 44000000 		.4byte	.LFE8-.LFB8
 1522 01f8 01       		.uleb128 0x1
 1523 01f9 9C       		.byte	0x9c
 1524 01fa 1D020000 		.4byte	0x21d
 1525 01fe 0F       		.uleb128 0xf
 1526 01ff A4020000 		.4byte	.LASF34
 1527 0203 01       		.byte	0x1
 1528 0204 F801     		.2byte	0x1f8
 1529 0206 83000000 		.4byte	0x83
 1530 020a 02       		.uleb128 0x2
 1531 020b 91       		.byte	0x91
 1532 020c 6C       		.sleb128 -20
 1533 020d 10       		.uleb128 0x10
 1534 020e 7F030000 		.4byte	.LASF35
 1535 0212 01       		.byte	0x1
 1536 0213 FA01     		.2byte	0x1fa
 1537 0215 83000000 		.4byte	0x83
 1538 0219 02       		.uleb128 0x2
 1539 021a 91       		.byte	0x91
 1540 021b 74       		.sleb128 -12
 1541 021c 00       		.byte	0
 1542 021d 12       		.uleb128 0x12
 1543 021e 03020000 		.4byte	.LASF37
 1544 0222 01       		.byte	0x1
 1545 0223 2502     		.2byte	0x225
 1546 0225 00000000 		.4byte	.LFB9
 1547 0229 1C000000 		.4byte	.LFE9-.LFB9
 1548 022d 01       		.uleb128 0x1
 1549 022e 9C       		.byte	0x9c
 1550 022f 43020000 		.4byte	0x243
 1551 0233 0F       		.uleb128 0xf
 1552 0234 1F010000 		.4byte	.LASF38
 1553 0238 01       		.byte	0x1
 1554 0239 2502     		.2byte	0x225
 1555 023b 83000000 		.4byte	0x83
 1556 023f 02       		.uleb128 0x2
 1557 0240 91       		.byte	0x91
 1558 0241 74       		.sleb128 -12
 1559 0242 00       		.byte	0
 1560 0243 12       		.uleb128 0x12
 1561 0244 43020000 		.4byte	.LASF39
 1562 0248 01       		.byte	0x1
 1563 0249 5102     		.2byte	0x251
 1564 024b 00000000 		.4byte	.LFB10
 1565 024f 30000000 		.4byte	.LFE10-.LFB10
 1566 0253 01       		.uleb128 0x1
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 44


 1567 0254 9C       		.byte	0x9c
 1568 0255 69020000 		.4byte	0x269
 1569 0259 0F       		.uleb128 0xf
 1570 025a CF010000 		.4byte	.LASF40
 1571 025e 01       		.byte	0x1
 1572 025f 5102     		.2byte	0x251
 1573 0261 83000000 		.4byte	0x83
 1574 0265 02       		.uleb128 0x2
 1575 0266 91       		.byte	0x91
 1576 0267 74       		.sleb128 -12
 1577 0268 00       		.byte	0
 1578 0269 12       		.uleb128 0x12
 1579 026a D8010000 		.4byte	.LASF41
 1580 026e 01       		.byte	0x1
 1581 026f 6602     		.2byte	0x266
 1582 0271 00000000 		.4byte	.LFB11
 1583 0275 2C000000 		.4byte	.LFE11-.LFB11
 1584 0279 01       		.uleb128 0x1
 1585 027a 9C       		.byte	0x9c
 1586 027b 8F020000 		.4byte	0x28f
 1587 027f 0F       		.uleb128 0xf
 1588 0280 25020000 		.4byte	.LASF42
 1589 0284 01       		.byte	0x1
 1590 0285 6602     		.2byte	0x266
 1591 0287 83000000 		.4byte	0x83
 1592 028b 02       		.uleb128 0x2
 1593 028c 91       		.byte	0x91
 1594 028d 74       		.sleb128 -12
 1595 028e 00       		.byte	0
 1596 028f 12       		.uleb128 0x12
 1597 0290 38010000 		.4byte	.LASF43
 1598 0294 01       		.byte	0x1
 1599 0295 7E02     		.2byte	0x27e
 1600 0297 00000000 		.4byte	.LFB12
 1601 029b 1C000000 		.4byte	.LFE12-.LFB12
 1602 029f 01       		.uleb128 0x1
 1603 02a0 9C       		.byte	0x9c
 1604 02a1 B5020000 		.4byte	0x2b5
 1605 02a5 0F       		.uleb128 0xf
 1606 02a6 1F010000 		.4byte	.LASF38
 1607 02aa 01       		.byte	0x1
 1608 02ab 7E02     		.2byte	0x27e
 1609 02ad 83000000 		.4byte	0x83
 1610 02b1 02       		.uleb128 0x2
 1611 02b2 91       		.byte	0x91
 1612 02b3 74       		.sleb128 -12
 1613 02b4 00       		.byte	0
 1614 02b5 12       		.uleb128 0x12
 1615 02b6 6F010000 		.4byte	.LASF44
 1616 02ba 01       		.byte	0x1
 1617 02bb 9502     		.2byte	0x295
 1618 02bd 00000000 		.4byte	.LFB13
 1619 02c1 1C000000 		.4byte	.LFE13-.LFB13
 1620 02c5 01       		.uleb128 0x1
 1621 02c6 9C       		.byte	0x9c
 1622 02c7 DB020000 		.4byte	0x2db
 1623 02cb 0F       		.uleb128 0xf
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 45


 1624 02cc 1F010000 		.4byte	.LASF38
 1625 02d0 01       		.byte	0x1
 1626 02d1 9502     		.2byte	0x295
 1627 02d3 83000000 		.4byte	0x83
 1628 02d7 02       		.uleb128 0x2
 1629 02d8 91       		.byte	0x91
 1630 02d9 74       		.sleb128 -12
 1631 02da 00       		.byte	0
 1632 02db 13       		.uleb128 0x13
 1633 02dc E3020000 		.4byte	.LASF45
 1634 02e0 01       		.byte	0x1
 1635 02e1 B102     		.2byte	0x2b1
 1636 02e3 00000000 		.4byte	.LFB14
 1637 02e7 30000000 		.4byte	.LFE14-.LFB14
 1638 02eb 01       		.uleb128 0x1
 1639 02ec 9C       		.byte	0x9c
 1640 02ed 10030000 		.4byte	0x310
 1641 02f1 0F       		.uleb128 0xf
 1642 02f2 A4020000 		.4byte	.LASF34
 1643 02f6 01       		.byte	0x1
 1644 02f7 B102     		.2byte	0x2b1
 1645 02f9 83000000 		.4byte	0x83
 1646 02fd 02       		.uleb128 0x2
 1647 02fe 91       		.byte	0x91
 1648 02ff 74       		.sleb128 -12
 1649 0300 0F       		.uleb128 0xf
 1650 0301 C1020000 		.4byte	.LASF46
 1651 0305 01       		.byte	0x1
 1652 0306 B102     		.2byte	0x2b1
 1653 0308 8F000000 		.4byte	0x8f
 1654 030c 02       		.uleb128 0x2
 1655 030d 91       		.byte	0x91
 1656 030e 72       		.sleb128 -14
 1657 030f 00       		.byte	0
 1658 0310 13       		.uleb128 0x13
 1659 0311 13020000 		.4byte	.LASF47
 1660 0315 01       		.byte	0x1
 1661 0316 D302     		.2byte	0x2d3
 1662 0318 00000000 		.4byte	.LFB15
 1663 031c 2C000000 		.4byte	.LFE15-.LFB15
 1664 0320 01       		.uleb128 0x1
 1665 0321 9C       		.byte	0x9c
 1666 0322 45030000 		.4byte	0x345
 1667 0326 0F       		.uleb128 0xf
 1668 0327 A4020000 		.4byte	.LASF34
 1669 032b 01       		.byte	0x1
 1670 032c D302     		.2byte	0x2d3
 1671 032e 83000000 		.4byte	0x83
 1672 0332 02       		.uleb128 0x2
 1673 0333 91       		.byte	0x91
 1674 0334 74       		.sleb128 -12
 1675 0335 0F       		.uleb128 0xf
 1676 0336 07000000 		.4byte	.LASF48
 1677 033a 01       		.byte	0x1
 1678 033b D302     		.2byte	0x2d3
 1679 033d 9B000000 		.4byte	0x9b
 1680 0341 02       		.uleb128 0x2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 46


 1681 0342 91       		.byte	0x91
 1682 0343 70       		.sleb128 -16
 1683 0344 00       		.byte	0
 1684 0345 11       		.uleb128 0x11
 1685 0346 2F020000 		.4byte	.LASF49
 1686 034a 01       		.byte	0x1
 1687 034b F402     		.2byte	0x2f4
 1688 034d 8F000000 		.4byte	0x8f
 1689 0351 00000000 		.4byte	.LFB16
 1690 0355 A4000000 		.4byte	.LFE16-.LFB16
 1691 0359 01       		.uleb128 0x1
 1692 035a 9C       		.byte	0x9c
 1693 035b 8D030000 		.4byte	0x38d
 1694 035f 0F       		.uleb128 0xf
 1695 0360 A4020000 		.4byte	.LASF34
 1696 0364 01       		.byte	0x1
 1697 0365 F402     		.2byte	0x2f4
 1698 0367 83000000 		.4byte	0x83
 1699 036b 02       		.uleb128 0x2
 1700 036c 91       		.byte	0x91
 1701 036d 6C       		.sleb128 -20
 1702 036e 0F       		.uleb128 0xf
 1703 036f C8020000 		.4byte	.LASF50
 1704 0373 01       		.byte	0x1
 1705 0374 F402     		.2byte	0x2f4
 1706 0376 8F000000 		.4byte	0x8f
 1707 037a 02       		.uleb128 0x2
 1708 037b 91       		.byte	0x91
 1709 037c 6A       		.sleb128 -22
 1710 037d 10       		.uleb128 0x10
 1711 037e B1010000 		.4byte	.LASF51
 1712 0382 01       		.byte	0x1
 1713 0383 F602     		.2byte	0x2f6
 1714 0385 8F000000 		.4byte	0x8f
 1715 0389 02       		.uleb128 0x2
 1716 038a 91       		.byte	0x91
 1717 038b 76       		.sleb128 -10
 1718 038c 00       		.byte	0
 1719 038d 11       		.uleb128 0x11
 1720 038e E3000000 		.4byte	.LASF52
 1721 0392 01       		.byte	0x1
 1722 0393 2A03     		.2byte	0x32a
 1723 0395 9B000000 		.4byte	0x9b
 1724 0399 00000000 		.4byte	.LFB17
 1725 039d 90000000 		.4byte	.LFE17-.LFB17
 1726 03a1 01       		.uleb128 0x1
 1727 03a2 9C       		.byte	0x9c
 1728 03a3 D5030000 		.4byte	0x3d5
 1729 03a7 0F       		.uleb128 0xf
 1730 03a8 A4020000 		.4byte	.LASF34
 1731 03ac 01       		.byte	0x1
 1732 03ad 2A03     		.2byte	0x32a
 1733 03af 83000000 		.4byte	0x83
 1734 03b3 02       		.uleb128 0x2
 1735 03b4 91       		.byte	0x91
 1736 03b5 64       		.sleb128 -28
 1737 03b6 0F       		.uleb128 0xf
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 47


 1738 03b7 C8020000 		.4byte	.LASF50
 1739 03bb 01       		.byte	0x1
 1740 03bc 2A03     		.2byte	0x32a
 1741 03be 8F000000 		.4byte	0x8f
 1742 03c2 02       		.uleb128 0x2
 1743 03c3 91       		.byte	0x91
 1744 03c4 62       		.sleb128 -30
 1745 03c5 10       		.uleb128 0x10
 1746 03c6 56010000 		.4byte	.LASF53
 1747 03ca 01       		.byte	0x1
 1748 03cb 2C03     		.2byte	0x32c
 1749 03cd C1000000 		.4byte	0xc1
 1750 03d1 02       		.uleb128 0x2
 1751 03d2 91       		.byte	0x91
 1752 03d3 68       		.sleb128 -24
 1753 03d4 00       		.byte	0
 1754 03d5 11       		.uleb128 0x11
 1755 03d6 16000000 		.4byte	.LASF54
 1756 03da 01       		.byte	0x1
 1757 03db 5703     		.2byte	0x357
 1758 03dd A7000000 		.4byte	0xa7
 1759 03e1 00000000 		.4byte	.LFB18
 1760 03e5 80000000 		.4byte	.LFE18-.LFB18
 1761 03e9 01       		.uleb128 0x1
 1762 03ea 9C       		.byte	0x9c
 1763 03eb 1D040000 		.4byte	0x41d
 1764 03ef 0F       		.uleb128 0xf
 1765 03f0 A4020000 		.4byte	.LASF34
 1766 03f4 01       		.byte	0x1
 1767 03f5 5703     		.2byte	0x357
 1768 03f7 83000000 		.4byte	0x83
 1769 03fb 02       		.uleb128 0x2
 1770 03fc 91       		.byte	0x91
 1771 03fd 64       		.sleb128 -28
 1772 03fe 0F       		.uleb128 0xf
 1773 03ff C8020000 		.4byte	.LASF50
 1774 0403 01       		.byte	0x1
 1775 0404 5703     		.2byte	0x357
 1776 0406 8F000000 		.4byte	0x8f
 1777 040a 02       		.uleb128 0x2
 1778 040b 91       		.byte	0x91
 1779 040c 62       		.sleb128 -30
 1780 040d 10       		.uleb128 0x10
 1781 040e 7E010000 		.4byte	.LASF55
 1782 0412 01       		.byte	0x1
 1783 0413 5903     		.2byte	0x359
 1784 0415 A7000000 		.4byte	0xa7
 1785 0419 02       		.uleb128 0x2
 1786 041a 91       		.byte	0x91
 1787 041b 6C       		.sleb128 -20
 1788 041c 00       		.byte	0
 1789 041d 09       		.uleb128 0x9
 1790 041e 83000000 		.4byte	0x83
 1791 0422 2D040000 		.4byte	0x42d
 1792 0426 0A       		.uleb128 0xa
 1793 0427 E5000000 		.4byte	0xe5
 1794 042b 02       		.byte	0x2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 48


 1795 042c 00       		.byte	0
 1796 042d 08       		.uleb128 0x8
 1797 042e AE020000 		.4byte	.LASF56
 1798 0432 01       		.byte	0x1
 1799 0433 21       		.byte	0x21
 1800 0434 3E040000 		.4byte	0x43e
 1801 0438 05       		.uleb128 0x5
 1802 0439 03       		.byte	0x3
 1803 043a 00000000 		.4byte	ADC_channelsConfig
 1804 043e 0B       		.uleb128 0xb
 1805 043f 1D040000 		.4byte	0x41d
 1806 0443 14       		.uleb128 0x14
 1807 0444 24010000 		.4byte	.LASF57
 1808 0448 01       		.byte	0x1
 1809 0449 18       		.byte	0x18
 1810 044a 6B000000 		.4byte	0x6b
 1811 044e 05       		.uleb128 0x5
 1812 044f 03       		.byte	0x3
 1813 0450 00000000 		.4byte	ADC_initVar
 1814 0454 09       		.uleb128 0x9
 1815 0455 8F000000 		.4byte	0x8f
 1816 0459 64040000 		.4byte	0x464
 1817 045d 0A       		.uleb128 0xa
 1818 045e E5000000 		.4byte	0xe5
 1819 0462 02       		.byte	0x2
 1820 0463 00       		.byte	0
 1821 0464 14       		.uleb128 0x14
 1822 0465 80020000 		.4byte	.LASF58
 1823 0469 01       		.byte	0x1
 1824 046a 19       		.byte	0x19
 1825 046b 75040000 		.4byte	0x475
 1826 046f 05       		.uleb128 0x5
 1827 0470 03       		.byte	0x3
 1828 0471 00000000 		.4byte	ADC_offset
 1829 0475 05       		.uleb128 0x5
 1830 0476 54040000 		.4byte	0x454
 1831 047a 09       		.uleb128 0x9
 1832 047b 9B000000 		.4byte	0x9b
 1833 047f 8A040000 		.4byte	0x48a
 1834 0483 0A       		.uleb128 0xa
 1835 0484 E5000000 		.4byte	0xe5
 1836 0488 02       		.byte	0x2
 1837 0489 00       		.byte	0
 1838 048a 14       		.uleb128 0x14
 1839 048b F7000000 		.4byte	.LASF59
 1840 048f 01       		.byte	0x1
 1841 0490 1A       		.byte	0x1a
 1842 0491 9B040000 		.4byte	0x49b
 1843 0495 05       		.uleb128 0x5
 1844 0496 03       		.byte	0x3
 1845 0497 00000000 		.4byte	ADC_countsPer10Volt
 1846 049b 05       		.uleb128 0x5
 1847 049c 7A040000 		.4byte	0x47a
 1848 04a0 00       		.byte	0
 1849              		.section	.debug_abbrev,"",%progbits
 1850              	.Ldebug_abbrev0:
 1851 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 49


 1852 0001 11       		.uleb128 0x11
 1853 0002 01       		.byte	0x1
 1854 0003 25       		.uleb128 0x25
 1855 0004 0E       		.uleb128 0xe
 1856 0005 13       		.uleb128 0x13
 1857 0006 0B       		.uleb128 0xb
 1858 0007 03       		.uleb128 0x3
 1859 0008 0E       		.uleb128 0xe
 1860 0009 1B       		.uleb128 0x1b
 1861 000a 0E       		.uleb128 0xe
 1862 000b 55       		.uleb128 0x55
 1863 000c 17       		.uleb128 0x17
 1864 000d 11       		.uleb128 0x11
 1865 000e 01       		.uleb128 0x1
 1866 000f 10       		.uleb128 0x10
 1867 0010 17       		.uleb128 0x17
 1868 0011 00       		.byte	0
 1869 0012 00       		.byte	0
 1870 0013 02       		.uleb128 0x2
 1871 0014 24       		.uleb128 0x24
 1872 0015 00       		.byte	0
 1873 0016 0B       		.uleb128 0xb
 1874 0017 0B       		.uleb128 0xb
 1875 0018 3E       		.uleb128 0x3e
 1876 0019 0B       		.uleb128 0xb
 1877 001a 03       		.uleb128 0x3
 1878 001b 0E       		.uleb128 0xe
 1879 001c 00       		.byte	0
 1880 001d 00       		.byte	0
 1881 001e 03       		.uleb128 0x3
 1882 001f 24       		.uleb128 0x24
 1883 0020 00       		.byte	0
 1884 0021 0B       		.uleb128 0xb
 1885 0022 0B       		.uleb128 0xb
 1886 0023 3E       		.uleb128 0x3e
 1887 0024 0B       		.uleb128 0xb
 1888 0025 03       		.uleb128 0x3
 1889 0026 08       		.uleb128 0x8
 1890 0027 00       		.byte	0
 1891 0028 00       		.byte	0
 1892 0029 04       		.uleb128 0x4
 1893 002a 16       		.uleb128 0x16
 1894 002b 00       		.byte	0
 1895 002c 03       		.uleb128 0x3
 1896 002d 0E       		.uleb128 0xe
 1897 002e 3A       		.uleb128 0x3a
 1898 002f 0B       		.uleb128 0xb
 1899 0030 3B       		.uleb128 0x3b
 1900 0031 05       		.uleb128 0x5
 1901 0032 49       		.uleb128 0x49
 1902 0033 13       		.uleb128 0x13
 1903 0034 00       		.byte	0
 1904 0035 00       		.byte	0
 1905 0036 05       		.uleb128 0x5
 1906 0037 35       		.uleb128 0x35
 1907 0038 00       		.byte	0
 1908 0039 49       		.uleb128 0x49
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 50


 1909 003a 13       		.uleb128 0x13
 1910 003b 00       		.byte	0
 1911 003c 00       		.byte	0
 1912 003d 06       		.uleb128 0x6
 1913 003e 2E       		.uleb128 0x2e
 1914 003f 00       		.byte	0
 1915 0040 3F       		.uleb128 0x3f
 1916 0041 19       		.uleb128 0x19
 1917 0042 03       		.uleb128 0x3
 1918 0043 0E       		.uleb128 0xe
 1919 0044 3A       		.uleb128 0x3a
 1920 0045 0B       		.uleb128 0xb
 1921 0046 3B       		.uleb128 0x3b
 1922 0047 0B       		.uleb128 0xb
 1923 0048 27       		.uleb128 0x27
 1924 0049 19       		.uleb128 0x19
 1925 004a 11       		.uleb128 0x11
 1926 004b 01       		.uleb128 0x1
 1927 004c 12       		.uleb128 0x12
 1928 004d 06       		.uleb128 0x6
 1929 004e 40       		.uleb128 0x40
 1930 004f 18       		.uleb128 0x18
 1931 0050 9642     		.uleb128 0x2116
 1932 0052 19       		.uleb128 0x19
 1933 0053 00       		.byte	0
 1934 0054 00       		.byte	0
 1935 0055 07       		.uleb128 0x7
 1936 0056 2E       		.uleb128 0x2e
 1937 0057 01       		.byte	0x1
 1938 0058 3F       		.uleb128 0x3f
 1939 0059 19       		.uleb128 0x19
 1940 005a 03       		.uleb128 0x3
 1941 005b 0E       		.uleb128 0xe
 1942 005c 3A       		.uleb128 0x3a
 1943 005d 0B       		.uleb128 0xb
 1944 005e 3B       		.uleb128 0x3b
 1945 005f 0B       		.uleb128 0xb
 1946 0060 27       		.uleb128 0x27
 1947 0061 19       		.uleb128 0x19
 1948 0062 11       		.uleb128 0x11
 1949 0063 01       		.uleb128 0x1
 1950 0064 12       		.uleb128 0x12
 1951 0065 06       		.uleb128 0x6
 1952 0066 40       		.uleb128 0x40
 1953 0067 18       		.uleb128 0x18
 1954 0068 9642     		.uleb128 0x2116
 1955 006a 19       		.uleb128 0x19
 1956 006b 01       		.uleb128 0x1
 1957 006c 13       		.uleb128 0x13
 1958 006d 00       		.byte	0
 1959 006e 00       		.byte	0
 1960 006f 08       		.uleb128 0x8
 1961 0070 34       		.uleb128 0x34
 1962 0071 00       		.byte	0
 1963 0072 03       		.uleb128 0x3
 1964 0073 0E       		.uleb128 0xe
 1965 0074 3A       		.uleb128 0x3a
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 51


 1966 0075 0B       		.uleb128 0xb
 1967 0076 3B       		.uleb128 0x3b
 1968 0077 0B       		.uleb128 0xb
 1969 0078 49       		.uleb128 0x49
 1970 0079 13       		.uleb128 0x13
 1971 007a 02       		.uleb128 0x2
 1972 007b 18       		.uleb128 0x18
 1973 007c 00       		.byte	0
 1974 007d 00       		.byte	0
 1975 007e 09       		.uleb128 0x9
 1976 007f 01       		.uleb128 0x1
 1977 0080 01       		.byte	0x1
 1978 0081 49       		.uleb128 0x49
 1979 0082 13       		.uleb128 0x13
 1980 0083 01       		.uleb128 0x1
 1981 0084 13       		.uleb128 0x13
 1982 0085 00       		.byte	0
 1983 0086 00       		.byte	0
 1984 0087 0A       		.uleb128 0xa
 1985 0088 21       		.uleb128 0x21
 1986 0089 00       		.byte	0
 1987 008a 49       		.uleb128 0x49
 1988 008b 13       		.uleb128 0x13
 1989 008c 2F       		.uleb128 0x2f
 1990 008d 0B       		.uleb128 0xb
 1991 008e 00       		.byte	0
 1992 008f 00       		.byte	0
 1993 0090 0B       		.uleb128 0xb
 1994 0091 26       		.uleb128 0x26
 1995 0092 00       		.byte	0
 1996 0093 49       		.uleb128 0x49
 1997 0094 13       		.uleb128 0x13
 1998 0095 00       		.byte	0
 1999 0096 00       		.byte	0
 2000 0097 0C       		.uleb128 0xc
 2001 0098 2E       		.uleb128 0x2e
 2002 0099 00       		.byte	0
 2003 009a 3F       		.uleb128 0x3f
 2004 009b 19       		.uleb128 0x19
 2005 009c 03       		.uleb128 0x3
 2006 009d 0E       		.uleb128 0xe
 2007 009e 3A       		.uleb128 0x3a
 2008 009f 0B       		.uleb128 0xb
 2009 00a0 3B       		.uleb128 0x3b
 2010 00a1 05       		.uleb128 0x5
 2011 00a2 27       		.uleb128 0x27
 2012 00a3 19       		.uleb128 0x19
 2013 00a4 11       		.uleb128 0x11
 2014 00a5 01       		.uleb128 0x1
 2015 00a6 12       		.uleb128 0x12
 2016 00a7 06       		.uleb128 0x6
 2017 00a8 40       		.uleb128 0x40
 2018 00a9 18       		.uleb128 0x18
 2019 00aa 9642     		.uleb128 0x2116
 2020 00ac 19       		.uleb128 0x19
 2021 00ad 00       		.byte	0
 2022 00ae 00       		.byte	0
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 52


 2023 00af 0D       		.uleb128 0xd
 2024 00b0 2E       		.uleb128 0x2e
 2025 00b1 00       		.byte	0
 2026 00b2 3F       		.uleb128 0x3f
 2027 00b3 19       		.uleb128 0x19
 2028 00b4 03       		.uleb128 0x3
 2029 00b5 0E       		.uleb128 0xe
 2030 00b6 3A       		.uleb128 0x3a
 2031 00b7 0B       		.uleb128 0xb
 2032 00b8 3B       		.uleb128 0x3b
 2033 00b9 05       		.uleb128 0x5
 2034 00ba 27       		.uleb128 0x27
 2035 00bb 19       		.uleb128 0x19
 2036 00bc 11       		.uleb128 0x11
 2037 00bd 01       		.uleb128 0x1
 2038 00be 12       		.uleb128 0x12
 2039 00bf 06       		.uleb128 0x6
 2040 00c0 40       		.uleb128 0x40
 2041 00c1 18       		.uleb128 0x18
 2042 00c2 9742     		.uleb128 0x2117
 2043 00c4 19       		.uleb128 0x19
 2044 00c5 00       		.byte	0
 2045 00c6 00       		.byte	0
 2046 00c7 0E       		.uleb128 0xe
 2047 00c8 2E       		.uleb128 0x2e
 2048 00c9 01       		.byte	0x1
 2049 00ca 3F       		.uleb128 0x3f
 2050 00cb 19       		.uleb128 0x19
 2051 00cc 03       		.uleb128 0x3
 2052 00cd 0E       		.uleb128 0xe
 2053 00ce 3A       		.uleb128 0x3a
 2054 00cf 0B       		.uleb128 0xb
 2055 00d0 3B       		.uleb128 0x3b
 2056 00d1 05       		.uleb128 0x5
 2057 00d2 27       		.uleb128 0x27
 2058 00d3 19       		.uleb128 0x19
 2059 00d4 49       		.uleb128 0x49
 2060 00d5 13       		.uleb128 0x13
 2061 00d6 11       		.uleb128 0x11
 2062 00d7 01       		.uleb128 0x1
 2063 00d8 12       		.uleb128 0x12
 2064 00d9 06       		.uleb128 0x6
 2065 00da 40       		.uleb128 0x40
 2066 00db 18       		.uleb128 0x18
 2067 00dc 9742     		.uleb128 0x2117
 2068 00de 19       		.uleb128 0x19
 2069 00df 01       		.uleb128 0x1
 2070 00e0 13       		.uleb128 0x13
 2071 00e1 00       		.byte	0
 2072 00e2 00       		.byte	0
 2073 00e3 0F       		.uleb128 0xf
 2074 00e4 05       		.uleb128 0x5
 2075 00e5 00       		.byte	0
 2076 00e6 03       		.uleb128 0x3
 2077 00e7 0E       		.uleb128 0xe
 2078 00e8 3A       		.uleb128 0x3a
 2079 00e9 0B       		.uleb128 0xb
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 53


 2080 00ea 3B       		.uleb128 0x3b
 2081 00eb 05       		.uleb128 0x5
 2082 00ec 49       		.uleb128 0x49
 2083 00ed 13       		.uleb128 0x13
 2084 00ee 02       		.uleb128 0x2
 2085 00ef 18       		.uleb128 0x18
 2086 00f0 00       		.byte	0
 2087 00f1 00       		.byte	0
 2088 00f2 10       		.uleb128 0x10
 2089 00f3 34       		.uleb128 0x34
 2090 00f4 00       		.byte	0
 2091 00f5 03       		.uleb128 0x3
 2092 00f6 0E       		.uleb128 0xe
 2093 00f7 3A       		.uleb128 0x3a
 2094 00f8 0B       		.uleb128 0xb
 2095 00f9 3B       		.uleb128 0x3b
 2096 00fa 05       		.uleb128 0x5
 2097 00fb 49       		.uleb128 0x49
 2098 00fc 13       		.uleb128 0x13
 2099 00fd 02       		.uleb128 0x2
 2100 00fe 18       		.uleb128 0x18
 2101 00ff 00       		.byte	0
 2102 0100 00       		.byte	0
 2103 0101 11       		.uleb128 0x11
 2104 0102 2E       		.uleb128 0x2e
 2105 0103 01       		.byte	0x1
 2106 0104 3F       		.uleb128 0x3f
 2107 0105 19       		.uleb128 0x19
 2108 0106 03       		.uleb128 0x3
 2109 0107 0E       		.uleb128 0xe
 2110 0108 3A       		.uleb128 0x3a
 2111 0109 0B       		.uleb128 0xb
 2112 010a 3B       		.uleb128 0x3b
 2113 010b 05       		.uleb128 0x5
 2114 010c 27       		.uleb128 0x27
 2115 010d 19       		.uleb128 0x19
 2116 010e 49       		.uleb128 0x49
 2117 010f 13       		.uleb128 0x13
 2118 0110 11       		.uleb128 0x11
 2119 0111 01       		.uleb128 0x1
 2120 0112 12       		.uleb128 0x12
 2121 0113 06       		.uleb128 0x6
 2122 0114 40       		.uleb128 0x40
 2123 0115 18       		.uleb128 0x18
 2124 0116 9642     		.uleb128 0x2116
 2125 0118 19       		.uleb128 0x19
 2126 0119 01       		.uleb128 0x1
 2127 011a 13       		.uleb128 0x13
 2128 011b 00       		.byte	0
 2129 011c 00       		.byte	0
 2130 011d 12       		.uleb128 0x12
 2131 011e 2E       		.uleb128 0x2e
 2132 011f 01       		.byte	0x1
 2133 0120 3F       		.uleb128 0x3f
 2134 0121 19       		.uleb128 0x19
 2135 0122 03       		.uleb128 0x3
 2136 0123 0E       		.uleb128 0xe
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 54


 2137 0124 3A       		.uleb128 0x3a
 2138 0125 0B       		.uleb128 0xb
 2139 0126 3B       		.uleb128 0x3b
 2140 0127 05       		.uleb128 0x5
 2141 0128 27       		.uleb128 0x27
 2142 0129 19       		.uleb128 0x19
 2143 012a 11       		.uleb128 0x11
 2144 012b 01       		.uleb128 0x1
 2145 012c 12       		.uleb128 0x12
 2146 012d 06       		.uleb128 0x6
 2147 012e 40       		.uleb128 0x40
 2148 012f 18       		.uleb128 0x18
 2149 0130 9742     		.uleb128 0x2117
 2150 0132 19       		.uleb128 0x19
 2151 0133 01       		.uleb128 0x1
 2152 0134 13       		.uleb128 0x13
 2153 0135 00       		.byte	0
 2154 0136 00       		.byte	0
 2155 0137 13       		.uleb128 0x13
 2156 0138 2E       		.uleb128 0x2e
 2157 0139 01       		.byte	0x1
 2158 013a 3F       		.uleb128 0x3f
 2159 013b 19       		.uleb128 0x19
 2160 013c 03       		.uleb128 0x3
 2161 013d 0E       		.uleb128 0xe
 2162 013e 3A       		.uleb128 0x3a
 2163 013f 0B       		.uleb128 0xb
 2164 0140 3B       		.uleb128 0x3b
 2165 0141 05       		.uleb128 0x5
 2166 0142 27       		.uleb128 0x27
 2167 0143 19       		.uleb128 0x19
 2168 0144 11       		.uleb128 0x11
 2169 0145 01       		.uleb128 0x1
 2170 0146 12       		.uleb128 0x12
 2171 0147 06       		.uleb128 0x6
 2172 0148 40       		.uleb128 0x40
 2173 0149 18       		.uleb128 0x18
 2174 014a 9642     		.uleb128 0x2116
 2175 014c 19       		.uleb128 0x19
 2176 014d 01       		.uleb128 0x1
 2177 014e 13       		.uleb128 0x13
 2178 014f 00       		.byte	0
 2179 0150 00       		.byte	0
 2180 0151 14       		.uleb128 0x14
 2181 0152 34       		.uleb128 0x34
 2182 0153 00       		.byte	0
 2183 0154 03       		.uleb128 0x3
 2184 0155 0E       		.uleb128 0xe
 2185 0156 3A       		.uleb128 0x3a
 2186 0157 0B       		.uleb128 0xb
 2187 0158 3B       		.uleb128 0x3b
 2188 0159 0B       		.uleb128 0xb
 2189 015a 49       		.uleb128 0x49
 2190 015b 13       		.uleb128 0x13
 2191 015c 3F       		.uleb128 0x3f
 2192 015d 19       		.uleb128 0x19
 2193 015e 02       		.uleb128 0x2
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 55


 2194 015f 18       		.uleb128 0x18
 2195 0160 00       		.byte	0
 2196 0161 00       		.byte	0
 2197 0162 00       		.byte	0
 2198              		.section	.debug_aranges,"",%progbits
 2199 0000 A4000000 		.4byte	0xa4
 2200 0004 0200     		.2byte	0x2
 2201 0006 00000000 		.4byte	.Ldebug_info0
 2202 000a 04       		.byte	0x4
 2203 000b 00       		.byte	0
 2204 000c 0000     		.2byte	0
 2205 000e 0000     		.2byte	0
 2206 0010 00000000 		.4byte	.LFB1
 2207 0014 24000000 		.4byte	.LFE1-.LFB1
 2208 0018 00000000 		.4byte	.LFB2
 2209 001c 10020000 		.4byte	.LFE2-.LFB2
 2210 0020 00000000 		.4byte	.LFB3
 2211 0024 38000000 		.4byte	.LFE3-.LFB3
 2212 0028 00000000 		.4byte	.LFB4
 2213 002c 18000000 		.4byte	.LFE4-.LFB4
 2214 0030 00000000 		.4byte	.LFB5
 2215 0034 1C000000 		.4byte	.LFE5-.LFB5
 2216 0038 00000000 		.4byte	.LFB6
 2217 003c 1C000000 		.4byte	.LFE6-.LFB6
 2218 0040 00000000 		.4byte	.LFB7
 2219 0044 48000000 		.4byte	.LFE7-.LFB7
 2220 0048 00000000 		.4byte	.LFB8
 2221 004c 44000000 		.4byte	.LFE8-.LFB8
 2222 0050 00000000 		.4byte	.LFB9
 2223 0054 1C000000 		.4byte	.LFE9-.LFB9
 2224 0058 00000000 		.4byte	.LFB10
 2225 005c 30000000 		.4byte	.LFE10-.LFB10
 2226 0060 00000000 		.4byte	.LFB11
 2227 0064 2C000000 		.4byte	.LFE11-.LFB11
 2228 0068 00000000 		.4byte	.LFB12
 2229 006c 1C000000 		.4byte	.LFE12-.LFB12
 2230 0070 00000000 		.4byte	.LFB13
 2231 0074 1C000000 		.4byte	.LFE13-.LFB13
 2232 0078 00000000 		.4byte	.LFB14
 2233 007c 30000000 		.4byte	.LFE14-.LFB14
 2234 0080 00000000 		.4byte	.LFB15
 2235 0084 2C000000 		.4byte	.LFE15-.LFB15
 2236 0088 00000000 		.4byte	.LFB16
 2237 008c A4000000 		.4byte	.LFE16-.LFB16
 2238 0090 00000000 		.4byte	.LFB17
 2239 0094 90000000 		.4byte	.LFE17-.LFB17
 2240 0098 00000000 		.4byte	.LFB18
 2241 009c 80000000 		.4byte	.LFE18-.LFB18
 2242 00a0 00000000 		.4byte	0
 2243 00a4 00000000 		.4byte	0
 2244              		.section	.debug_ranges,"",%progbits
 2245              	.Ldebug_ranges0:
 2246 0000 00000000 		.4byte	.LFB1
 2247 0004 24000000 		.4byte	.LFE1
 2248 0008 00000000 		.4byte	.LFB2
 2249 000c 10020000 		.4byte	.LFE2
 2250 0010 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 56


 2251 0014 38000000 		.4byte	.LFE3
 2252 0018 00000000 		.4byte	.LFB4
 2253 001c 18000000 		.4byte	.LFE4
 2254 0020 00000000 		.4byte	.LFB5
 2255 0024 1C000000 		.4byte	.LFE5
 2256 0028 00000000 		.4byte	.LFB6
 2257 002c 1C000000 		.4byte	.LFE6
 2258 0030 00000000 		.4byte	.LFB7
 2259 0034 48000000 		.4byte	.LFE7
 2260 0038 00000000 		.4byte	.LFB8
 2261 003c 44000000 		.4byte	.LFE8
 2262 0040 00000000 		.4byte	.LFB9
 2263 0044 1C000000 		.4byte	.LFE9
 2264 0048 00000000 		.4byte	.LFB10
 2265 004c 30000000 		.4byte	.LFE10
 2266 0050 00000000 		.4byte	.LFB11
 2267 0054 2C000000 		.4byte	.LFE11
 2268 0058 00000000 		.4byte	.LFB12
 2269 005c 1C000000 		.4byte	.LFE12
 2270 0060 00000000 		.4byte	.LFB13
 2271 0064 1C000000 		.4byte	.LFE13
 2272 0068 00000000 		.4byte	.LFB14
 2273 006c 30000000 		.4byte	.LFE14
 2274 0070 00000000 		.4byte	.LFB15
 2275 0074 2C000000 		.4byte	.LFE15
 2276 0078 00000000 		.4byte	.LFB16
 2277 007c A4000000 		.4byte	.LFE16
 2278 0080 00000000 		.4byte	.LFB17
 2279 0084 90000000 		.4byte	.LFE17
 2280 0088 00000000 		.4byte	.LFB18
 2281 008c 80000000 		.4byte	.LFE18
 2282 0090 00000000 		.4byte	0
 2283 0094 00000000 		.4byte	0
 2284              		.section	.debug_line,"",%progbits
 2285              	.Ldebug_line0:
 2286 0000 A0020000 		.section	.debug_str,"MS",%progbits,1
 2286      02004200 
 2286      00000201 
 2286      FB0E0D00 
 2286      01010101 
 2287              	.LASF10:
 2288 0000 75696E74 		.ascii	"uint16\000"
 2288      313600
 2289              	.LASF48:
 2290 0007 61646347 		.ascii	"adcGain\000"
 2290      61696E00 
 2291              	.LASF23:
 2292 000f 636F756E 		.ascii	"counts\000"
 2292      747300
 2293              	.LASF54:
 2294 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2294      436F756E 
 2294      7473546F 
 2294      5F566F6C 
 2294      747300
 2295              	.LASF36:
 2296 0029 4144435F 		.ascii	"ADC_Init\000"
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 57


 2296      496E6974 
 2296      00
 2297              	.LASF7:
 2298 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2298      206C6F6E 
 2298      6720756E 
 2298      7369676E 
 2298      65642069 
 2299              	.LASF62:
 2300 0049 433A5C55 		.ascii	"C:\\Users\\passw\\OneDrive\\Documents\\PSoC\\HWSW 9"
 2300      73657273 
 2300      5C706173 
 2300      73775C4F 
 2300      6E654472 
 2301 0076 5C485753 		.ascii	"\\HWSW 9.cydsn\000"
 2301      5720392E 
 2301      63796473 
 2301      6E00
 2302              	.LASF24:
 2303 0084 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2303      496E7075 
 2303      7473506C 
 2303      6163656D 
 2303      656E7400 
 2304              	.LASF28:
 2305 0098 4144435F 		.ascii	"ADC_StartConvert\000"
 2305      53746172 
 2305      74436F6E 
 2305      76657274 
 2305      00
 2306              	.LASF6:
 2307 00a9 6C6F6E67 		.ascii	"long long int\000"
 2307      206C6F6E 
 2307      6720696E 
 2307      7400
 2308              	.LASF0:
 2309 00b7 7369676E 		.ascii	"signed char\000"
 2309      65642063 
 2309      68617200 
 2310              	.LASF30:
 2311 00c3 73746174 		.ascii	"status\000"
 2311      757300
 2312              	.LASF13:
 2313 00ca 696E7433 		.ascii	"int32\000"
 2313      3200
 2314              	.LASF25:
 2315 00d0 4144435F 		.ascii	"ADC_Start\000"
 2315      53746172 
 2315      7400
 2316              	.LASF4:
 2317 00da 6C6F6E67 		.ascii	"long int\000"
 2317      20696E74 
 2317      00
 2318              	.LASF52:
 2319 00e3 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2319      436F756E 
 2319      7473546F 
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 58


 2319      5F75566F 
 2319      6C747300 
 2320              	.LASF59:
 2321 00f7 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2321      636F756E 
 2321      74735065 
 2321      72313056 
 2321      6F6C7400 
 2322              	.LASF9:
 2323 010b 75696E74 		.ascii	"uint8\000"
 2323      3800
 2324              	.LASF16:
 2325 0111 646F7562 		.ascii	"double\000"
 2325      6C6500
 2326              	.LASF11:
 2327 0118 75696E74 		.ascii	"uint32\000"
 2327      333200
 2328              	.LASF38:
 2329 011f 6D61736B 		.ascii	"mask\000"
 2329      00
 2330              	.LASF57:
 2331 0124 4144435F 		.ascii	"ADC_initVar\000"
 2331      696E6974 
 2331      56617200 
 2332              	.LASF33:
 2333 0130 7265744D 		.ascii	"retMode\000"
 2333      6F646500 
 2334              	.LASF43:
 2335 0138 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2335      5365744C 
 2335      696D6974 
 2335      4D61736B 
 2335      00
 2336              	.LASF8:
 2337 0149 756E7369 		.ascii	"unsigned int\000"
 2337      676E6564 
 2337      20696E74 
 2337      00
 2338              	.LASF53:
 2339 0156 75566F6C 		.ascii	"uVolts\000"
 2339      747300
 2340              	.LASF5:
 2341 015d 6C6F6E67 		.ascii	"long unsigned int\000"
 2341      20756E73 
 2341      69676E65 
 2341      6420696E 
 2341      7400
 2342              	.LASF44:
 2343 016f 4144435F 		.ascii	"ADC_SetSatMask\000"
 2343      53657453 
 2343      61744D61 
 2343      736B00
 2344              	.LASF55:
 2345 017e 766F6C74 		.ascii	"volts\000"
 2345      7300
 2346              	.LASF22:
 2347 0184 746D7052 		.ascii	"tmpRegVal\000"
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 59


 2347      65675661 
 2347      6C00
 2348              	.LASF3:
 2349 018e 73686F72 		.ascii	"short unsigned int\000"
 2349      7420756E 
 2349      7369676E 
 2349      65642069 
 2349      6E7400
 2350              	.LASF29:
 2351 01a1 4144435F 		.ascii	"ADC_StopConvert\000"
 2351      53746F70 
 2351      436F6E76 
 2351      65727400 
 2352              	.LASF51:
 2353 01b1 6D566F6C 		.ascii	"mVolts\000"
 2353      747300
 2354              	.LASF19:
 2355 01b8 72656733 		.ascii	"reg32\000"
 2355      3200
 2356              	.LASF14:
 2357 01be 666C6F61 		.ascii	"float32\000"
 2357      74333200 
 2358              	.LASF20:
 2359 01c6 73697A65 		.ascii	"sizetype\000"
 2359      74797065 
 2359      00
 2360              	.LASF40:
 2361 01cf 6C6F774C 		.ascii	"lowLimit\000"
 2361      696D6974 
 2361      00
 2362              	.LASF41:
 2363 01d8 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2363      53657448 
 2363      6967684C 
 2363      696D6974 
 2363      00
 2364              	.LASF31:
 2365 01e9 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2365      4973456E 
 2365      64436F6E 
 2365      76657273 
 2365      696F6E00 
 2366              	.LASF17:
 2367 01fd 696E7436 		.ascii	"int64\000"
 2367      3400
 2368              	.LASF37:
 2369 0203 4144435F 		.ascii	"ADC_SetChanMask\000"
 2369      53657443 
 2369      68616E4D 
 2369      61736B00 
 2370              	.LASF47:
 2371 0213 4144435F 		.ascii	"ADC_SetGain\000"
 2371      53657447 
 2371      61696E00 
 2372              	.LASF15:
 2373 021f 666C6F61 		.ascii	"float\000"
 2373      7400
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 60


 2374              	.LASF42:
 2375 0225 68696768 		.ascii	"highLimit\000"
 2375      4C696D69 
 2375      7400
 2376              	.LASF49:
 2377 022f 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2377      436F756E 
 2377      7473546F 
 2377      5F6D566F 
 2377      6C747300 
 2378              	.LASF39:
 2379 0243 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2379      5365744C 
 2379      6F774C69 
 2379      6D697400 
 2380              	.LASF61:
 2381 0253 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2381      6E657261 
 2381      7465645F 
 2381      536F7572 
 2381      63655C50 
 2382              	.LASF1:
 2383 0272 756E7369 		.ascii	"unsigned char\000"
 2383      676E6564 
 2383      20636861 
 2383      7200
 2384              	.LASF58:
 2385 0280 4144435F 		.ascii	"ADC_offset\000"
 2385      6F666673 
 2385      657400
 2386              	.LASF2:
 2387 028b 73686F72 		.ascii	"short int\000"
 2387      7420696E 
 2387      7400
 2388              	.LASF27:
 2389 0295 4144435F 		.ascii	"ADC_Stop\000"
 2389      53746F70 
 2389      00
 2390              	.LASF21:
 2391 029e 63684E75 		.ascii	"chNum\000"
 2391      6D00
 2392              	.LASF34:
 2393 02a4 6368616E 		.ascii	"chan\000"
 2393      00
 2394              	.LASF18:
 2395 02a9 63686172 		.ascii	"char\000"
 2395      00
 2396              	.LASF56:
 2397 02ae 4144435F 		.ascii	"ADC_channelsConfig\000"
 2397      6368616E 
 2397      6E656C73 
 2397      436F6E66 
 2397      696700
 2398              	.LASF46:
 2399 02c1 6F666673 		.ascii	"offset\000"
 2399      657400
 2400              	.LASF50:
ARM GAS  C:\Users\passw\AppData\Local\Temp\cc6Ki7qk.s 			page 61


 2401 02c8 61646343 		.ascii	"adcCounts\000"
 2401      6F756E74 
 2401      7300
 2402              	.LASF26:
 2403 02d2 4144435F 		.ascii	"ADC_Enable\000"
 2403      456E6162 
 2403      6C6500
 2404              	.LASF12:
 2405 02dd 696E7431 		.ascii	"int16\000"
 2405      3600
 2406              	.LASF45:
 2407 02e3 4144435F 		.ascii	"ADC_SetOffset\000"
 2407      5365744F 
 2407      66667365 
 2407      7400
 2408              	.LASF60:
 2409 02f1 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2409      4320342E 
 2409      392E3320 
 2409      32303135 
 2409      30333033 
 2410 0324 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2410      20726576 
 2410      6973696F 
 2410      6E203232 
 2410      31323230 
 2411 0357 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2411      66756E63 
 2411      74696F6E 
 2411      2D736563 
 2411      74696F6E 
 2412              	.LASF35:
 2413 037f 72657375 		.ascii	"result\000"
 2413      6C7400
 2414              	.LASF32:
 2415 0386 4144435F 		.ascii	"ADC_GetResult16\000"
 2415      47657452 
 2415      6573756C 
 2415      74313600 
 2416              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
